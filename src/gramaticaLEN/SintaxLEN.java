
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 17 14:58:47 CST 2020
//----------------------------------------------------

package gramaticaLEN;

import java_cup.runtime.*;
import java.util.*;
import pollitos.*;
import java.util.regex.Pattern;
import seccion_4.*;
import seccion_2.*;
import seccion_5.*;
import LALR.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 17 14:58:47 CST 2020
  */
public class SintaxLEN extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxLEN() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxLEN(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxLEN(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\045\002\000\002\046" +
    "\002\000\002\047\002\000\002\002\017\000\002\021\003" +
    "\000\002\022\007\000\002\022\007\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\004\000\002" +
    "\022\004\000\002\022\002\000\002\023\003\000\002\024" +
    "\007\000\002\024\007\000\002\024\007\000\002\024\007" +
    "\000\002\024\004\000\002\024\004\000\002\025\007\000" +
    "\002\025\007\000\002\025\007\000\002\025\007\000\002" +
    "\025\004\000\002\025\004\000\002\025\002\000\002\026" +
    "\006\000\002\026\004\000\002\030\007\000\002\030\007" +
    "\000\002\030\005\000\002\030\005\000\002\033\003\000" +
    "\002\033\003\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\003\000\002\031" +
    "\002\000\002\027\003\000\002\027\002\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\002\000" +
    "\002\035\005\000\002\050\002\000\002\036\012\000\002" +
    "\036\002\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\002\000\002\037\005\000\002\037\002" +
    "\000\002\051\002\000\002\040\012\000\002\040\002\000" +
    "\002\041\005\000\002\041\002\000\002\042\011\000\002" +
    "\042\007\000\002\042\004\000\002\042\004\000\002\042" +
    "\002\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\002\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\002\000\002\052\002\000\002\004" +
    "\005\000\002\004\002\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\004\000" +
    "\002\010\002\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\002\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\002\000\002" +
    "\005\005\000\002\006\005\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\022\003\012\005\015\006\010\007\011\010" +
    "\006\011\014\014\ufff4\032\007\001\002\000\004\002\u0117" +
    "\001\002\000\004\014\000\001\002\000\004\012\116\001" +
    "\002\000\064\004\057\012\071\013\105\015\054\016\053" +
    "\017\104\020\066\021\103\022\067\023\072\024\070\025" +
    "\074\032\007\042\061\044\075\046\076\047\065\050\063" +
    "\051\100\052\102\053\073\055\055\056\060\057\056\060" +
    "\101\001\002\000\004\012\047\001\002\000\004\012\036" +
    "\001\002\000\022\003\012\005\015\006\010\007\011\010" +
    "\006\011\014\014\ufff4\032\007\001\002\000\022\003\012" +
    "\005\015\006\010\007\011\010\006\011\014\014\ufff4\032" +
    "\007\001\002\000\004\012\030\001\002\000\004\012\017" +
    "\001\002\000\004\014\ufffc\001\002\000\012\042\uff63\051" +
    "\uff63\052\uff63\056\uff63\001\002\000\004\013\026\001\002" +
    "\000\012\042\023\051\022\052\025\056\024\001\002\000" +
    "\014\013\uff6a\042\uff66\051\uff66\052\uff66\056\uff66\001\002" +
    "\000\014\013\uff68\042\uff64\051\uff64\052\uff64\056\uff64\001" +
    "\002\000\014\013\uff6b\042\uff67\051\uff67\052\uff67\056\uff67" +
    "\001\002\000\014\013\uff69\042\uff65\051\uff65\052\uff65\056" +
    "\uff65\001\002\000\022\003\012\005\015\006\010\007\011" +
    "\010\006\011\014\014\ufff4\032\007\001\002\000\004\014" +
    "\ufffb\001\002\000\012\042\uff63\051\uff63\052\uff63\056\uff63" +
    "\001\002\000\004\013\032\001\002\000\022\003\012\005" +
    "\015\006\010\007\011\010\006\011\014\014\ufff4\032\007" +
    "\001\002\000\004\014\ufff7\001\002\000\004\014\ufff6\001" +
    "\002\000\004\014\ufff5\001\002\000\012\042\uff5a\051\uff5a" +
    "\052\uff5a\056\uff5a\001\002\000\012\042\044\051\043\052" +
    "\046\056\045\001\002\000\004\013\041\001\002\000\022" +
    "\003\012\005\015\006\010\007\011\010\006\011\014\014" +
    "\ufff4\032\007\001\002\000\004\014\ufff9\001\002\000\014" +
    "\013\uff61\042\uff5d\051\uff5d\052\uff5d\056\uff5d\001\002\000" +
    "\014\013\uff5f\042\uff5b\051\uff5b\052\uff5b\056\uff5b\001\002" +
    "\000\014\013\uff62\042\uff5e\051\uff5e\052\uff5e\056\uff5e\001" +
    "\002\000\014\013\uff60\042\uff5c\051\uff5c\052\uff5c\056\uff5c" +
    "\001\002\000\012\042\uff63\051\uff63\052\uff63\056\uff63\001" +
    "\002\000\004\013\051\001\002\000\022\003\012\005\015" +
    "\006\010\007\011\010\006\011\014\014\ufff4\032\007\001" +
    "\002\000\004\014\ufffa\001\002\000\070\004\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\032\uff97\033\uff97" +
    "\042\uff97\044\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060\uff97\001\002" +
    "\000\070\004\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\032\uff98\033\uff98\042\uff98\044\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\001\002\000\070\004\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\032\uffa2\033\uffa2\042" +
    "\uffa2\044\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\001\002\000" +
    "\070\004\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\032\uff89\033\uff89\042\uff89\044\uff89\046\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\053\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\001\002\000\070\004\uff93\012\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\032\uff93\033\uff93\042\uff93" +
    "\044\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053" +
    "\uff93\055\uff93\056\uff93\057\uff93\060\uff93\001\002\000\070" +
    "\004\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\032\uff9f\033\uff9f\042\uff9f\044\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\001\002\000\070\004\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\032\uffa0\033\uffa0\042\uffa0\044" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\001\002\000\066\004" +
    "\057\012\071\013\105\015\054\016\053\017\104\020\066" +
    "\021\103\022\067\023\072\024\070\025\074\032\007\033" +
    "\112\042\110\044\075\046\076\047\065\050\063\051\114" +
    "\052\115\053\073\055\106\056\107\057\056\060\101\001" +
    "\002\000\070\004\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\032\uff8f\033\uff8f\042\uff8f\044\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\060\uff8f\001\002\000\070\004\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\032\uff9c\033\uff9c" +
    "\042\uff9c\044\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\001\002" +
    "\000\070\004\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016" +
    "\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90" +
    "\025\uff90\032\uff90\033\uff90\042\uff90\044\uff90\046\uff90\047" +
    "\uff90\050\uff90\051\uff90\052\uff90\053\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\001\002\000\070\004\uff95\012\uff95\013" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\032\uff95\033\uff95\042" +
    "\uff95\044\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\055\uff95\056\uff95\057\uff95\060\uff95\001\002\000" +
    "\070\004\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025" +
    "\uff8b\032\uff8b\033\uff8b\042\uff8b\044\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\001\002\000\070\004\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\032\uff91\033\uff91\042\uff91" +
    "\044\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053" +
    "\uff91\055\uff91\056\uff91\057\uff91\060\uff91\001\002\000\070" +
    "\004\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\032\uff9b\033\uff9b\042\uff9b\044\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\001\002\000\070\004\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\032\uff92\033\uff92\042\uff92\044" +
    "\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\055\uff92\056\uff92\057\uff92\060\uff92\001\002\000\070\004" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\032" +
    "\uff9a\033\uff9a\042\uff9a\044\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\001\002\000\070\004\uff8e\012\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\032\uff8e\033\uff8e\042\uff8e\044\uff8e" +
    "\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\001\002\000\070\004\uff8d" +
    "\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\032\uff8d" +
    "\033\uff8d\042\uff8d\044\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\001\002\000\070\004\uff8a\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\025\uff8a\032\uff8a\033\uff8a\042\uff8a\044\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\001\002\000\070\004\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\032\uffa1\033" +
    "\uffa1\042\uffa1\044\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\001" +
    "\002\000\070\004\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\032\uff9e\033\uff9e\042\uff9e\044\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\001\002\000\070\004\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\032\uff8c\033\uff8c" +
    "\042\uff8c\044\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\001\002" +
    "\000\070\004\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\032\uff9d\033\uff9d\042\uff9d\044\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\001\002\000\070\004\uff94\012\uff94\013" +
    "\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\032\uff94\033\uff94\042" +
    "\uff94\044\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\055\uff94\056\uff94\057\uff94\060\uff94\001\002\000" +
    "\070\004\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\032\uff96\033\uff96\042\uff96\044\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\001\002\000\070\004\uff99\012\uff99\013\uff99" +
    "\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\uff99\032\uff99\033\uff99\042\uff99" +
    "\044\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\055\uff99\056\uff99\057\uff99\060\uff99\001\002\000\070" +
    "\004\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\032\uffa9\033\uffa9\042\uffa9\044\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\001\002\000\070\004\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\032\uffa7\033\uffa7\042\uffa7\044" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\001\002\000\070\004" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\032" +
    "\uffa4\033\uffa4\042\uffa4\044\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\001\002\000\070\004\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\032\uffa3\033\uffa3\042\uffa3\044\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\001\002\000\104\003\uff59" +
    "\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59\011\uff59\012" +
    "\uff59\013\uff59\014\uff59\015\uff59\016\uff59\017\uff59\020\uff59" +
    "\021\uff59\022\uff59\023\uff59\024\uff59\025\uff59\032\uff59\033" +
    "\uff59\042\uff59\044\uff59\046\uff59\047\uff59\050\uff59\051\uff59" +
    "\052\uff59\053\uff59\055\uff59\056\uff59\057\uff59\060\uff59\001" +
    "\002\000\070\004\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\032\uffa8\033\uffa8\042\uffa8\044\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\060\uffa8\001\002\000\070\004\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\032\uffa6\033\uffa6" +
    "\042\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\001\002" +
    "\000\070\004\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\032\uffa5\033\uffa5\042\uffa5\044\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\001\002\000\004\042\117\001\002\000" +
    "\004\013\120\001\002\000\022\003\012\005\015\006\010" +
    "\007\011\010\006\011\014\014\ufff4\032\007\001\002\000" +
    "\004\014\ufff8\001\002\000\004\014\123\001\002\000\064" +
    "\004\057\012\071\013\105\015\054\016\053\017\104\020" +
    "\066\021\103\022\067\023\072\024\070\025\074\032\007" +
    "\042\061\044\075\046\076\047\065\050\063\051\100\052" +
    "\102\053\073\055\055\056\060\057\056\060\101\001\002" +
    "\000\004\014\uffff\001\002\000\066\004\057\012\071\013" +
    "\105\014\ufff3\015\054\016\053\017\104\020\066\021\103" +
    "\022\067\023\072\024\070\025\074\032\007\042\110\044" +
    "\075\046\076\047\065\050\063\051\114\052\115\053\073" +
    "\055\106\056\107\057\056\060\101\001\002\000\004\014" +
    "\127\001\002\000\016\003\132\032\007\051\130\052\135" +
    "\056\134\057\133\001\002\000\004\044\u0113\001\002\000" +
    "\004\014\310\001\002\000\020\003\140\014\uffe6\032\007" +
    "\051\137\052\143\056\142\057\141\001\002\000\004\044" +
    "\303\001\002\000\004\044\277\001\002\000\004\044\273" +
    "\001\002\000\020\003\140\014\uffe6\032\007\051\137\052" +
    "\143\056\142\057\141\001\002\000\004\044\267\001\002" +
    "\000\020\003\140\014\uffe6\032\007\051\137\052\143\056" +
    "\142\057\141\001\002\000\004\044\262\001\002\000\004" +
    "\044\256\001\002\000\004\044\147\001\002\000\004\014" +
    "\uffee\001\002\000\020\003\140\014\uffe6\032\007\051\137" +
    "\052\143\056\142\057\141\001\002\000\004\014\uffe8\001" +
    "\002\000\010\015\154\022\150\023\152\001\002\000\056" +
    "\004\223\012\231\013\246\015\220\016\217\017\245\020" +
    "\227\021\244\023\232\024\230\025\234\044\235\046\236" +
    "\047\226\050\225\051\240\052\242\053\233\055\221\056" +
    "\224\057\222\060\237\001\002\000\024\013\uffd8\015\154" +
    "\017\206\020\207\021\210\022\150\023\152\024\uffd8\046" +
    "\204\001\002\000\010\015\154\022\150\023\152\001\002" +
    "\000\004\013\177\001\002\000\020\016\uffd2\026\164\027" +
    "\160\030\157\042\156\051\155\052\161\001\002\000\006" +
    "\016\uffdf\025\uffdf\001\002\000\004\025\174\001\002\000" +
    "\012\016\uffd2\026\164\027\160\030\157\001\002\000\012" +
    "\016\uffd2\026\164\027\160\030\157\001\002\000\006\016" +
    "\uffde\025\uffde\001\002\000\004\025\167\001\002\000\004" +
    "\016\166\001\002\000\012\016\uffd2\026\164\027\160\030" +
    "\157\001\002\000\004\016\uffd5\001\002\000\024\013\uffe1" +
    "\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\046\uffe1\001\002\000\006\051\155\052\161\001\002" +
    "\000\004\016\171\001\002\000\024\013\uffe2\015\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\046\uffe2" +
    "\001\002\000\004\016\uffd4\001\002\000\004\016\uffd3\001" +
    "\002\000\004\042\175\001\002\000\004\016\176\001\002" +
    "\000\024\013\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\046\uffe3\001\002\000\020\003\140" +
    "\014\uffe6\032\007\051\137\052\143\056\142\057\141\001" +
    "\002\000\004\014\uffea\001\002\000\004\024\202\001\002" +
    "\000\024\013\uffd8\015\154\017\206\020\207\021\210\022" +
    "\150\023\152\024\uffd8\046\204\001\002\000\006\013\uffe5" +
    "\024\uffe5\001\002\000\014\013\uffd6\015\154\022\150\023" +
    "\152\024\uffd6\001\002\000\006\013\uffd9\024\uffd9\001\002" +
    "\000\014\013\uffd6\015\154\022\150\023\152\024\uffd6\001" +
    "\002\000\014\013\uffd6\015\154\022\150\023\152\024\uffd6" +
    "\001\002\000\014\013\uffd6\015\154\022\150\023\152\024" +
    "\uffd6\001\002\000\006\013\uffd7\024\uffd7\001\002\000\006" +
    "\013\uffda\024\uffda\001\002\000\006\013\uffdb\024\uffdb\001" +
    "\002\000\006\013\uffdc\024\uffdc\001\002\000\006\013\uffdd" +
    "\024\uffdd\001\002\000\006\013\uffe4\024\uffe4\001\002\000" +
    "\062\004\uff79\012\uff79\013\uff79\015\uff79\016\uff79\017\uff79" +
    "\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\042" +
    "\uff79\044\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79" +
    "\053\uff79\055\uff79\056\uff79\057\uff79\060\uff79\001\002\000" +
    "\062\004\uff7a\012\uff7a\013\uff7a\015\uff7a\016\uff7a\017\uff7a" +
    "\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\042" +
    "\uff7a\044\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a" +
    "\053\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\001\002\000" +
    "\062\004\uff82\012\uff82\013\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\042" +
    "\uff82\044\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82" +
    "\053\uff82\055\uff82\056\uff82\057\uff82\060\uff82\001\002\000" +
    "\062\004\uff6c\012\uff6c\013\uff6c\015\uff6c\016\uff6c\017\uff6c" +
    "\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\042" +
    "\uff6c\044\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c" +
    "\053\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\001\002\000" +
    "\062\004\uff75\012\uff75\013\uff75\015\uff75\016\uff75\017\uff75" +
    "\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\042" +
    "\uff75\044\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75" +
    "\053\uff75\055\uff75\056\uff75\057\uff75\060\uff75\001\002\000" +
    "\062\004\uff80\012\uff80\013\uff80\015\uff80\016\uff80\017\uff80" +
    "\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\042" +
    "\uff80\044\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80" +
    "\053\uff80\055\uff80\056\uff80\057\uff80\060\uff80\001\002\000" +
    "\062\004\uff71\012\uff71\013\uff71\015\uff71\016\uff71\017\uff71" +
    "\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\042" +
    "\uff71\044\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71" +
    "\053\uff71\055\uff71\056\uff71\057\uff71\060\uff71\001\002\000" +
    "\062\004\uff72\012\uff72\013\uff72\015\uff72\016\uff72\017\uff72" +
    "\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\042" +
    "\uff72\044\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72" +
    "\053\uff72\055\uff72\056\uff72\057\uff72\060\uff72\001\002\000" +
    "\062\004\uff77\012\uff77\013\uff77\015\uff77\016\uff77\017\uff77" +
    "\020\uff77\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\042" +
    "\uff77\044\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77" +
    "\053\uff77\055\uff77\056\uff77\057\uff77\060\uff77\001\002\000" +
    "\062\004\uff73\012\uff73\013\uff73\015\uff73\016\uff73\017\uff73" +
    "\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\042" +
    "\uff73\044\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73" +
    "\053\uff73\055\uff73\056\uff73\057\uff73\060\uff73\001\002\000" +
    "\062\004\uff7d\012\uff7d\013\uff7d\015\uff7d\016\uff7d\017\uff7d" +
    "\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\042" +
    "\uff7d\044\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d" +
    "\053\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\001\002\000" +
    "\062\004\uff74\012\uff74\013\uff74\015\uff74\016\uff74\017\uff74" +
    "\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\042" +
    "\uff74\044\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74" +
    "\053\uff74\055\uff74\056\uff74\057\uff74\060\uff74\001\002\000" +
    "\062\004\uff7c\012\uff7c\013\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\042" +
    "\uff7c\044\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\001\002\000" +
    "\062\004\uff70\012\uff70\013\uff70\015\uff70\016\uff70\017\uff70" +
    "\020\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\042" +
    "\uff70\044\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70" +
    "\053\uff70\055\uff70\056\uff70\057\uff70\060\uff70\001\002\000" +
    "\062\004\uff6f\012\uff6f\013\uff6f\015\uff6f\016\uff6f\017\uff6f" +
    "\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\042" +
    "\uff6f\044\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f" +
    "\053\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\001\002\000" +
    "\062\004\uff6d\012\uff6d\013\uff6d\015\uff6d\016\uff6d\017\uff6d" +
    "\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\042" +
    "\uff6d\044\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d" +
    "\053\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\001\002\000" +
    "\062\004\uff6e\012\uff6e\013\uff6e\015\uff6e\016\uff6e\017\uff6e" +
    "\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\042" +
    "\uff6e\044\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e" +
    "\053\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e\001\002\000" +
    "\062\004\uff7f\012\uff7f\013\uff7f\015\uff7f\016\uff7f\017\uff7f" +
    "\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\042" +
    "\uff7f\044\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\001\002\000" +
    "\062\004\223\012\231\013\246\015\220\016\217\017\245" +
    "\020\227\021\244\022\252\023\232\024\230\025\234\042" +
    "\250\044\235\046\236\047\226\050\225\051\253\052\254" +
    "\053\233\055\247\056\251\057\222\060\237\001\002\000" +
    "\062\004\uff7e\012\uff7e\013\uff7e\015\uff7e\016\uff7e\017\uff7e" +
    "\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\042" +
    "\uff7e\044\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e" +
    "\053\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\001\002\000" +
    "\062\004\uff81\012\uff81\013\uff81\015\uff81\016\uff81\017\uff81" +
    "\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\042" +
    "\uff81\044\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81" +
    "\053\uff81\055\uff81\056\uff81\057\uff81\060\uff81\001\002\000" +
    "\062\004\uff76\012\uff76\013\uff76\015\uff76\016\uff76\017\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\042" +
    "\uff76\044\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76" +
    "\053\uff76\055\uff76\056\uff76\057\uff76\060\uff76\001\002\000" +
    "\062\004\uff78\012\uff78\013\uff78\015\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78\042" +
    "\uff78\044\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78" +
    "\053\uff78\055\uff78\056\uff78\057\uff78\060\uff78\001\002\000" +
    "\062\004\uff7b\012\uff7b\013\uff7b\015\uff7b\016\uff7b\017\uff7b" +
    "\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\042" +
    "\uff7b\044\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\001\002\000" +
    "\062\004\uff88\012\uff88\013\uff88\015\uff88\016\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\042" +
    "\uff88\044\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\055\uff88\056\uff88\057\uff88\060\uff88\001\002\000" +
    "\062\004\uff83\012\uff83\013\uff83\015\uff83\016\uff83\017\uff83" +
    "\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\042" +
    "\uff83\044\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83" +
    "\053\uff83\055\uff83\056\uff83\057\uff83\060\uff83\001\002\000" +
    "\062\004\uff86\012\uff86\013\uff86\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\042" +
    "\uff86\044\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\055\uff86\056\uff86\057\uff86\060\uff86\001\002\000" +
    "\024\013\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\046\uffe0\001\002\000\062\004\uff85\012" +
    "\uff85\013\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\042\uff85\044\uff85\046" +
    "\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\055\uff85" +
    "\056\uff85\057\uff85\060\uff85\001\002\000\062\004\uff84\012" +
    "\uff84\013\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84" +
    "\022\uff84\023\uff84\024\uff84\025\uff84\042\uff84\044\uff84\046" +
    "\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\001\002\000\062\004\uff87\012" +
    "\uff87\013\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\042\uff87\044\uff87\046" +
    "\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\055\uff87" +
    "\056\uff87\057\uff87\060\uff87\001\002\000\010\015\154\022" +
    "\150\023\152\001\002\000\004\013\260\001\002\000\020" +
    "\003\140\014\uffe6\032\007\051\137\052\143\056\142\057" +
    "\141\001\002\000\004\014\uffec\001\002\000\010\015\154" +
    "\022\150\023\152\001\002\000\004\013\264\001\002\000" +
    "\020\003\140\014\uffe6\032\007\051\137\052\143\056\142" +
    "\057\141\001\002\000\004\014\uffe9\001\002\000\004\014" +
    "\uffe7\001\002\000\010\015\154\022\150\023\152\001\002" +
    "\000\004\013\271\001\002\000\020\003\140\014\uffe6\032" +
    "\007\051\137\052\143\056\142\057\141\001\002\000\004" +
    "\014\uffeb\001\002\000\010\015\154\022\150\023\152\001" +
    "\002\000\004\013\275\001\002\000\020\003\140\014\uffe6" +
    "\032\007\051\137\052\143\056\142\057\141\001\002\000" +
    "\004\014\ufff0\001\002\000\010\015\154\022\150\023\152" +
    "\001\002\000\004\013\301\001\002\000\020\003\140\014" +
    "\uffe6\032\007\051\137\052\143\056\142\057\141\001\002" +
    "\000\004\014\ufff2\001\002\000\010\015\154\022\150\023" +
    "\152\001\002\000\004\013\305\001\002\000\020\003\140" +
    "\014\uffe6\032\007\051\137\052\143\056\142\057\141\001" +
    "\002\000\004\014\uffef\001\002\000\004\014\uffed\001\002" +
    "\000\012\014\uff57\032\313\034\uff57\035\uff57\001\002\000" +
    "\004\014\ufffe\001\002\000\010\014\uffce\034\317\035\uffce" +
    "\001\002\000\064\004\057\012\071\013\105\015\054\016" +
    "\053\017\104\020\066\021\103\022\067\023\072\024\070" +
    "\025\074\032\007\042\061\044\075\046\076\047\065\050" +
    "\063\051\100\052\102\053\073\055\055\056\060\057\056" +
    "\060\101\001\002\000\066\004\057\012\071\013\105\015" +
    "\054\016\053\017\104\020\066\021\103\022\067\023\072" +
    "\024\070\025\074\032\007\033\315\042\110\044\075\046" +
    "\076\047\065\050\063\051\114\052\115\053\073\055\106" +
    "\056\107\057\056\060\101\001\002\000\010\014\uff58\034" +
    "\uff58\035\uff58\001\002\000\006\014\uffc5\035\336\001\002" +
    "\000\012\036\322\037\320\040\321\051\uffca\001\002\000" +
    "\006\051\uffcc\052\uffcc\001\002\000\006\051\uffcb\052\uffcb" +
    "\001\002\000\006\051\uffcd\052\uffcd\001\002\000\004\051" +
    "\uffd0\001\002\000\004\051\325\001\002\000\006\004\326" +
    "\013\uffc8\001\002\000\004\051\333\001\002\000\004\013" +
    "\330\001\002\000\012\014\uff57\032\313\034\uff57\035\uff57" +
    "\001\002\000\010\014\uffce\034\317\035\uffce\001\002\000" +
    "\006\014\uffcf\035\uffcf\001\002\000\006\004\326\013\uffc8" +
    "\001\002\000\004\013\uffc9\001\002\000\004\014\uffd1\001" +
    "\002\000\012\036\322\037\320\040\321\052\uffca\001\002" +
    "\000\004\052\uffc7\001\002\000\004\052\341\001\002\000" +
    "\006\004\342\013\uffc3\001\002\000\004\052\347\001\002" +
    "\000\004\013\344\001\002\000\010\014\uff57\032\313\035" +
    "\uff57\001\002\000\006\014\uffc5\035\336\001\002\000\004" +
    "\014\uffc6\001\002\000\006\004\342\013\uffc3\001\002\000" +
    "\004\013\uffc4\001\002\000\004\014\352\001\002\000\012" +
    "\003\353\014\uffbe\032\007\052\354\001\002\000\012\003" +
    "\353\014\uffbe\032\007\052\354\001\002\000\004\012\361" +
    "\001\002\000\004\014\360\001\002\000\012\003\353\014" +
    "\uffbe\032\007\052\354\001\002\000\004\014\uffc0\001\002" +
    "\000\004\002\ufffd\001\002\000\004\012\362\001\002\000" +
    "\012\013\367\051\363\052\366\056\365\001\002\000\016" +
    "\012\371\013\uffb7\047\uffb7\051\uffb7\052\uffb7\056\uffb7\001" +
    "\002\000\006\013\uffb0\047\u010b\001\002\000\016\012\371" +
    "\013\uffb7\047\uffb7\051\uffb7\052\uffb7\056\uffb7\001\002\000" +
    "\016\012\371\013\uffb7\047\uffb7\051\uffb7\052\uffb7\056\uffb7" +
    "\001\002\000\012\003\353\014\uffbe\032\007\052\354\001" +
    "\002\000\004\014\uffc1\001\002\000\010\051\u0105\052\u0107" +
    "\056\u0106\001\002\000\014\013\uffb3\047\uffb3\051\373\052" +
    "\376\056\375\001\002\000\016\012\371\013\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\056\uffb7\001\002\000\006\013\uffbb\047" +
    "\uffbb\001\002\000\016\012\371\013\uffb7\047\uffb7\051\uffb7" +
    "\052\uffb7\056\uffb7\001\002\000\016\012\371\013\uffb7\047" +
    "\uffb7\051\uffb7\052\uffb7\056\uffb7\001\002\000\014\013\uffb3" +
    "\047\uffb3\051\373\052\376\056\375\001\002\000\006\013" +
    "\uffb4\047\uffb4\001\002\000\014\013\uffb3\047\uffb3\051\373" +
    "\052\376\056\375\001\002\000\006\013\uffb6\047\uffb6\001" +
    "\002\000\014\013\uffb3\047\uffb3\051\373\052\376\056\375" +
    "\001\002\000\006\013\uffb5\047\uffb5\001\002\000\014\013" +
    "\uffb9\047\uffb9\051\uffb9\052\uffb9\056\uffb9\001\002\000\014" +
    "\013\uffba\047\uffba\051\uffba\052\uffba\056\uffba\001\002\000" +
    "\014\013\uffb8\047\uffb8\051\uffb8\052\uffb8\056\uffb8\001\002" +
    "\000\014\013\uffb3\047\uffb3\051\373\052\376\056\375\001" +
    "\002\000\006\013\uffbd\047\uffbd\001\002\000\004\013\u010e" +
    "\001\002\000\004\050\uffb2\001\002\000\004\050\u010d\001" +
    "\002\000\004\013\uffb1\001\002\000\012\003\353\014\uffbe" +
    "\032\007\052\354\001\002\000\004\014\uffc2\001\002\000" +
    "\014\013\uffb3\047\uffb3\051\373\052\376\056\375\001\002" +
    "\000\006\013\uffbc\047\uffbc\001\002\000\004\014\uffbf\001" +
    "\002\000\010\015\154\022\150\023\152\001\002\000\004" +
    "\013\u0115\001\002\000\020\003\140\014\uffe6\032\007\051" +
    "\137\052\143\056\142\057\141\001\002\000\004\014\ufff1" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\012\002\003\005\012\021\004\022\015\001" +
    "\001\000\002\001\001\000\004\045\121\001\001\000\002" +
    "\001\001\000\010\005\063\017\061\020\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\012\022\034" +
    "\001\001\000\006\005\012\022\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\017" +
    "\014\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\012\022\026\001\001\000\002\001" +
    "\001\000\006\013\030\014\020\001\001\000\002\001\001" +
    "\000\006\005\012\022\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\037\012\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\012\022\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\047\014\020\001\001\000\002\001\001\000\006" +
    "\005\012\022\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\110\020\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\012\022\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\063" +
    "\017\124\020\076\023\123\001\001\000\004\046\125\001" +
    "\001\000\006\005\110\020\112\001\001\000\002\001\001" +
    "\000\006\005\135\024\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\144\025\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\144\025\143\001\001\000\002\001\001\000\006\005\144" +
    "\025\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\144\025\145" +
    "\001\001\000\002\001\001\000\006\026\152\030\150\001" +
    "\001\000\006\015\240\016\242\001\001\000\010\026\204" +
    "\030\150\031\215\001\001\000\006\026\200\030\150\001" +
    "\001\000\002\001\001\000\006\032\162\033\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\172\001" +
    "\001\000\004\032\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\144\025\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\204\030\150\031\202" +
    "\001\001\000\002\001\001\000\010\026\210\027\214\030" +
    "\150\001\001\000\002\001\001\000\010\026\210\027\213" +
    "\030\150\001\001\000\010\026\210\027\212\030\150\001" +
    "\001\000\010\026\210\027\211\030\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\256\030\150\001\001" +
    "\000\002\001\001\000\006\005\144\025\260\001\001\000" +
    "\002\001\001\000\006\026\262\030\150\001\001\000\002" +
    "\001\001\000\006\005\144\025\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\267\030\150\001\001" +
    "\000\002\001\001\000\006\005\144\025\271\001\001\000" +
    "\002\001\001\000\006\026\273\030\150\001\001\000\002" +
    "\001\001\000\006\005\144\025\275\001\001\000\002\001" +
    "\001\000\006\026\277\030\150\001\001\000\002\001\001" +
    "\000\006\005\144\025\301\001\001\000\002\001\001\000" +
    "\006\026\303\030\150\001\001\000\002\001\001\000\006" +
    "\005\144\025\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\311\035\310\001\001\000\004\047\350" +
    "\001\001\000\004\036\315\001\001\000\010\005\063\017" +
    "\313\020\076\001\001\000\006\005\110\020\112\001\001" +
    "\000\002\001\001\000\004\040\334\001\001\000\004\034" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\323\001\001\000\002\001\001\000" +
    "\004\037\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\330\001\001\000\004\036\331\001\001\000" +
    "\002\001\001\000\004\037\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\336\001\001\000\004\051" +
    "\337\001\001\000\002\001\001\000\004\041\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\344\001" +
    "\001\000\004\040\345\001\001\000\002\001\001\000\004" +
    "\041\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\355\042\354\001\001\000\006\005\355\042\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\355\042\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\363\001\001\000\004\003" +
    "\u010f\001\001\000\004\004\u0109\001\001\000\004\003\u0107" +
    "\001\001\000\004\003\371\001\001\000\006\005\355\042" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\373\001\001\000\004\003\u0102\001\001\000\002\001" +
    "\001\000\004\003\u0100\001\001\000\004\003\376\001\001" +
    "\000\004\044\377\001\001\000\002\001\001\000\004\044" +
    "\u0101\001\001\000\002\001\001\000\004\044\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\355\042\u010e\001\001" +
    "\000\002\001\001\000\004\044\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\u0113\030\150\001\001" +
    "\000\002\001\001\000\006\005\144\025\u0115\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxLEN$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxLEN$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxLEN$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Lo mas probable es que estos arraylist sean temporales
    public ArrayList<Estados> listEstados = new ArrayList<>();
    public ArrayList<MisExpresiones> listTemporal = new ArrayList<>();
    public ArrayList<Simbolos> listSimbolos = new ArrayList<>();
    public int cont1 = 1;
    
    public ArrayList<MisExpresiones> listExpresiones;
    public String tipoSimbolo = "";
    public Verificaciones verificador4 = new Verificaciones();
    public Verificaciones2 ver5 = new Verificaciones2();
    public CreacionClases clase = new CreacionClases();
    
    public SintaxLEN(AnalizadorLexico lex, ArrayList<MisExpresiones> listExpresiones, ArrayList<Estados> listEstados){
        super(lex);
        this.listEstados = listEstados;
        this.listExpresiones = listExpresiones;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

    public void traspasarDatos(ArrayList<Simbolos> list1, ArrayList<Simbolos> listGeneral){
        for(int i = 0; i < list1.size(); i++){

            if(!verificador4.verificarIdentificador(listGeneral, list1.get(i).getIdentificador())){
                listGeneral.add(list1.get(i));
            }            
        }
        list1.clear();
    }

    public void traspasarDatos2(ArrayList<Estados> list1, ArrayList<Estados> listGeneral){
        for(int i = 0; i < list1.size(); i++){
            listGeneral.add(list1.get(i));
        }
        list1.clear();
    }

   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxLEN$actions {
  private final SintaxLEN parser;

  /** Constructor */
  CUP$SintaxLEN$actions(SintaxLEN parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxLEN$do_action(
    int                        CUP$SintaxLEN$act_num,
    java_cup.runtime.lr_parser CUP$SintaxLEN$parser,
    java.util.Stack            CUP$SintaxLEN$stack,
    int                        CUP$SintaxLEN$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxLEN$result;

      /* select the action based on the action number */
      switch (CUP$SintaxLEN$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // COM2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("COM2",4, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // COM2 ::= comentario_a CODIGO comentario_b 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("COM2",4, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // COM ::= comentario_a CODIGO comentario_b 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("COM",3, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CADENA2 ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CADENA2 ::= CADENA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CADENA2 ::= CADENA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CADENA2 ::= CADENA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CADENA2 ::= CADENA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CADENA ::= CADENA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CADENA ::= CADENA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CADENA ::= CADENA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CADENA ::= CADENA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PALABRA2 ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PALABRA2 ::= PALABRA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PALABRA2 ::= PALABRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PALABRA2 ::= PALABRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PALABRA2 ::= PALABRA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PALABRA ::= PALABRA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PALABRA ::= PALABRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PALABRA ::= PALABRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PALABRA ::= PALABRA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SIMBOLOS2 ::= ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SIMBOLOS2 ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SIMBOLOS2 ::= diagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SIMBOLOS2 ::= igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SIMBOLOS2 ::= guion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SIMBOLOS2 ::= llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SIMBOLOS2 ::= llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SIMBOLOS2 ::= parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SIMBOLOS2 ::= parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SIMBOLOS2 ::= coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SIMBOLOS2 ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SIMBOLOS2 ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SIMBOLOS2 ::= interrogacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SIMBOLOS2 ::= agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SIMBOLOS2 ::= agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SIMBOLOS2 ::= punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SIMBOLOS2 ::= punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SIMBOLOS2 ::= dos_puntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SIMBOLOS ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SIMBOLOS ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SIMBOLOS ::= soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SIMBOLOS ::= SIMBOLOS2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SIMBOLOS ::= resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SIMBOLOS ::= SIMBOLOS numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SIMBOLOS ::= SIMBOLOS idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SIMBOLOS ::= SIMBOLOS idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SIMBOLOS ::= SIMBOLOS soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SIMBOLOS ::= SIMBOLOS SIMBOLOS2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SIMBOLOS ::= SIMBOLOS resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CODIGO2 ::= ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CODIGO2 ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CODIGO2 ::= comillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CODIGO2 ::= diagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CODIGO2 ::= igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CODIGO2 ::= guion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CODIGO2 ::= llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CODIGO2 ::= llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CODIGO2 ::= parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CODIGO2 ::= parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CODIGO2 ::= coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CODIGO2 ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CODIGO2 ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CODIGO2 ::= interrogacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CODIGO2 ::= agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CODIGO2 ::= agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CODIGO2 ::= punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CODIGO2 ::= punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CODIGO2 ::= dos_puntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CODIGO ::= COM 
            {
              String RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CODIGO ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CODIGO ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CODIGO ::= soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CODIGO ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CODIGO ::= CODIGO2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CODIGO ::= resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CODIGO ::= CODIGO COM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CODIGO ::= CODIGO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CODIGO ::= CODIGO idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CODIGO ::= CODIGO idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CODIGO ::= CODIGO soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CODIGO ::= CODIGO CODIGO2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CODIGO ::= CODIGO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LETRA2 ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA2",6, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LETRA2 ::= LETRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA2",6, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LETRA2 ::= LETRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA2",6, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LETRA ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA",5, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LETRA ::= LETRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA",5, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LETRA ::= LETRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA",5, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // A53 ::= 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A53",2, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // A53 ::= llave_a NT$5 llave_b 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A53",2, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$5 ::= 
            {
              Object RESULT =null;
 /*PENDIENTE*/ 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // A52 ::= 
            {
              ArrayList<Expresiones> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // A52 ::= idMay SIMBOLO A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  if(parser.ver5.verificarId(parser.listSimbolos, a.toString())){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null,"*")); } else { b.add(new Expresiones(a.toString(), false, null, null)); } } RESULT=b;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // A52 ::= idMin SIMBOLO A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString())){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, ")")); } else { b.add(new Expresiones(a.toString(), false, null, null)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // A52 ::= soloLetra SIMBOLO A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString())){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&")); } else { b.add(new Expresiones(a.toString(), false, null, null)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIMBOLO ::= 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIMBOLO ::= dos_puntos idMay 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMBOLO ::= dos_puntos idMin 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIMBOLO ::= dos_puntos soloLetra 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // A51 ::= idMay SIMBOLO A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString())){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&")); } else { b.add(new Expresiones(a.toString(), false, null, null)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A51",33, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // A51 ::= idMin SIMBOLO A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString())){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&")); } else { b.add(new Expresiones(a.toString(), false, null, null)); } }  RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A51",33, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // A51 ::= soloLetra SIMBOLO A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString())){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&")); } else { b.add(new Expresiones(a.toString(), false, null, null)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A51",33, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // A5 ::= 
            {
              ArrayList<Estados> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // A5 ::= error A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> b = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // A5 ::= COM A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> a = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A5 ::= idMay dos_puntos dos_puntos punto_coma A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> b = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarEstado(parser.listSimbolos, a.toString())){ b.add(new Estados(parser.cont1, a.toString(), new ArrayList<>())); parser.cont1++; } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // A5 ::= idMay dos_puntos dos_puntos A51 A53 punto_coma A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> d = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarEstado(parser.listSimbolos, a.toString())){ d.add(new Estados(parser.cont1,a.toString(), b)); parser.cont1++; } RESULT=d; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // A421 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A421",31, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // A421 ::= coma idMay A421 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> b = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdentificador(b, a.toString())){ b.add(new Simbolos("NoTerminal", a.toString(), parser.tipoSimbolo)); } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A421",31, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // A42 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A42",30, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // A42 ::= noTerminal TIPO NT$4 idMay A421 punto_coma COM2 A42 
            {
              ArrayList<Simbolos> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<Simbolos>) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		ArrayList<Simbolos> c = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.traspasarDatos(c,d);  if(!parser.verificador4.verificarIdentificador(d, b.toString())){ d.add(new Simbolos("NoTerminal", b.toString(), parser.tipoSimbolo)); } RESULT=d; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A42",30, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$4 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.tipoSimbolo=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // A411 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A411",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // A411 ::= coma idMin A411 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> b = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdentificador(b, a.toString())){  b.add(new Simbolos("Terminal", a.toString(), parser.tipoSimbolo)); } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A411",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",26, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= tipoCadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",26, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= tipoReal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",26, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= tipoEntero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",26, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // A41 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A41",28, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // A41 ::= terminal1 TIPO NT$3 idMin A411 punto_coma COM2 A41 
            {
              ArrayList<Simbolos> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<Simbolos>) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		ArrayList<Simbolos> c = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  parser.traspasarDatos(c,d); if(!parser.verificador4.verificarIdentificador(d, b.toString())){  d.add(new Simbolos("Terminal", b.toString(), parser.tipoSimbolo)); } RESULT=d; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A41",28, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$3 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.tipoSimbolo=a;
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // A4 ::= COM2 A41 A42 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		ArrayList<Simbolos> a = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> b = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.traspasarDatos(b,a); RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A4",27, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // A34 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // A34 ::= espacio A34 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // A34 ::= tab A34 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // A34 ::= enter A34 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // A311 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A311",21, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // A311 ::= A31 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A311",21, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // A33 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // A33 ::= A31 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String cadena = a.toString(); RESULT=cadena; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // A33 ::= mas A311 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String cadena = a.toString()+b.toString(); RESULT=cadena; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // A33 ::= por A311 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String cadena = a.toString()+b.toString(); RESULT=cadena; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // A33 ::= interrogacion A311 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String cadena = a.toString()+b.toString(); RESULT=cadena; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // A33 ::= o A311 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String cadena = a.toString()+b.toString(); RESULT=cadena; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_LETRA ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO_LETRA",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_LETRA ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO_LETRA",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // A32 ::= comillas SIMBOLOS comillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",22, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // A32 ::= agrupacion_a A34 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",22, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // A32 ::= agrupacion_a TIPO_LETRA guion TIPO_LETRA agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.toString().length()==1 && d.toString().length()==1){ String cadena = a.toString()+b.toString()+c.toString()+d.toString()+e.toString(); RESULT=cadena; } 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",22, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // A32 ::= agrupacion_a numero guion numero agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  if(b.toString().length()==1 && d.toString().length()==1){ String cadena = a.toString()+b.toString()+c.toString()+d.toString()+e.toString(); RESULT=cadena; }  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",22, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // A31 ::= A32 A33 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A31",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // A31 ::= parentesis_a A31 parentesis_b A33 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A31",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // A35 ::= 
            {
              ArrayList<MisExpresiones> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // A35 ::= error A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // A35 ::= COM A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // A35 ::= ampersand igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(a.length()>1){  c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));         parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));} else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // A35 ::= idMay igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(a.length()>1){ c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));            parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));} else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // A35 ::= idMin igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  if(a.length()>1){ c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));              parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));} else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // A35 ::= soloLetra igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  if(a.length()>1){ c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));              parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));}  else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // A3 ::= error A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // A3 ::= COM A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // A3 ::= ampersand igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		if(a.length()>1){ c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));                     parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));} else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // A3 ::= idMay igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  if(a.length()>1){ c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));           parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), "")); } else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // A3 ::= idMin igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(a.length()>1){ c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));        parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), "")); } else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // A3 ::= soloLetra igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  if(a.length()>1){ c.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), ""));             parser.listExpresiones.add(new MisExpresiones(b.toString(), Pattern.compile(a.toString()), "")); } else { c.add(new MisExpresiones(b.toString(), null, a.toString())); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // A2 ::= CODIGO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A2",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // A11 ::= 
            {
              DatosLenguaje RESULT =null;
		 RESULT=new DatosLenguaje(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // A11 ::= error A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // A11 ::= COM A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // A11 ::= extension dos_puntos PALABRA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getExtension()==null){ b.setExtension(a.toString()); } else { System.out.println("extension ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // A11 ::= lanzamiento dos_puntos numero punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getLanzamiento()==null){ b.setLanzamiento(Integer.parseInt(a.toString())); } else { System.out.println("lanzamiento ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A11 ::= autor dos_puntos CADENA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getAutor()==null){ b.setAutor(a.toString()); } else { System.out.println("autor ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A11 ::= version dos_puntos PALABRA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getVersion()==null){ b.setVersion(a.toString()); } else { System.out.println("version ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A11 ::= nombre dos_puntos PALABRA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){if(b.getNombre()==null){ b.setNombre(a.toString()); } else {  System.out.println("nombre ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A1 ::= A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A1",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= A1 NT$0 separador A2 NT$1 separador A3 separador A4 NT$2 separador A5 separador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-12)).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		ArrayList<Estados> e = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		 parser.cont1=1; parser.traspasarDatos2(e, parser.listEstados); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-8)).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.traspasarDatos(d, parser.listSimbolos); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.clase.nuevaClase("pruebaClase", b); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 if(a.getNombre()==null){ System.out.println("Falta atributo nombre"); } 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		RESULT = start_val;
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxLEN$parser.done_parsing();
          return CUP$SintaxLEN$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

