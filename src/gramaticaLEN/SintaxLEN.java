
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 30 19:07:53 CST 2020
//----------------------------------------------------

package gramaticaLEN;

import java_cup.runtime.*;
import java.util.*;
import pollitos.*;
import java.util.regex.Pattern;
import seccion_4.*;
import seccion_2.*;
import seccion_5.*;
import LALR.*;
import Arbol.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 30 19:07:53 CST 2020
  */
public class SintaxLEN extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxLEN() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxLEN(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxLEN(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\364\000\002\002\004\000\002\053\002\000\002\054" +
    "\002\000\002\055\002\000\002\056\002\000\002\002\020" +
    "\000\002\025\003\000\002\026\007\000\002\026\007\000" +
    "\002\026\007\000\002\026\007\000\002\026\007\000\002" +
    "\026\004\000\002\026\004\000\002\026\002\000\002\031" +
    "\003\000\002\031\002\000\002\032\007\000\002\032\007" +
    "\000\002\032\007\000\002\032\007\000\002\032\004\000" +
    "\002\032\004\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\033\007\000\002\033\004\000\002\033" +
    "\004\000\002\033\002\000\002\034\006\000\002\034\004" +
    "\000\002\036\007\000\002\036\007\000\002\036\005\000" +
    "\002\036\005\000\002\041\003\000\002\041\003\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\003\000\002\037\002\000\002\035\003" +
    "\000\002\035\002\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\002\000\002\043\004\000\002" +
    "\057\002\000\002\060\002\000\002\044\013\000\002\061" +
    "\002\000\002\062\002\000\002\044\013\000\002\044\004" +
    "\000\002\044\002\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\002\000\002\045\005\000\002" +
    "\045\002\000\002\047\005\000\002\047\002\000\002\050" +
    "\011\000\002\050\010\000\002\050\004\000\002\050\004" +
    "\000\002\050\002\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\022\004\000\002\022\004\000\002" +
    "\022\002\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\002\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\002\000\002\030\005\000" +
    "\002\030\004\000\002\030\002\000\002\027\006\000\002" +
    "\027\007\000\002\027\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\002\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\002\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\002\000\002\004\005\000\002\005\005\000" +
    "\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\022\003\012\005\015\006\010\007\011\010" +
    "\006\011\014\014\ufff3\032\007\001\002\000\004\002\u0164" +
    "\001\002\000\004\014\000\001\002\000\004\012\116\001" +
    "\002\000\064\004\057\012\071\013\105\015\054\016\053" +
    "\017\104\020\066\021\103\022\067\023\072\024\070\025" +
    "\074\032\007\042\061\044\075\046\076\047\065\050\063" +
    "\051\100\052\102\053\073\055\055\056\060\057\056\060" +
    "\101\001\002\000\004\012\047\001\002\000\004\012\036" +
    "\001\002\000\022\003\012\005\015\006\010\007\011\010" +
    "\006\011\014\014\ufff3\032\007\001\002\000\022\003\012" +
    "\005\015\006\010\007\011\010\006\011\014\014\ufff3\032" +
    "\007\001\002\000\004\012\030\001\002\000\004\012\017" +
    "\001\002\000\004\014\ufffb\001\002\000\012\042\uff1a\051" +
    "\uff1a\052\uff1a\056\uff1a\001\002\000\004\013\026\001\002" +
    "\000\012\042\023\051\022\052\025\056\024\001\002\000" +
    "\014\013\uff21\042\uff1d\051\uff1d\052\uff1d\056\uff1d\001\002" +
    "\000\014\013\uff1f\042\uff1b\051\uff1b\052\uff1b\056\uff1b\001" +
    "\002\000\014\013\uff22\042\uff1e\051\uff1e\052\uff1e\056\uff1e" +
    "\001\002\000\014\013\uff20\042\uff1c\051\uff1c\052\uff1c\056" +
    "\uff1c\001\002\000\022\003\012\005\015\006\010\007\011" +
    "\010\006\011\014\014\ufff3\032\007\001\002\000\004\014" +
    "\ufffa\001\002\000\012\042\uff1a\051\uff1a\052\uff1a\056\uff1a" +
    "\001\002\000\004\013\032\001\002\000\022\003\012\005" +
    "\015\006\010\007\011\010\006\011\014\014\ufff3\032\007" +
    "\001\002\000\004\014\ufff6\001\002\000\004\014\ufff5\001" +
    "\002\000\004\014\ufff4\001\002\000\012\042\uff11\051\uff11" +
    "\052\uff11\056\uff11\001\002\000\012\042\044\051\043\052" +
    "\046\056\045\001\002\000\004\013\041\001\002\000\022" +
    "\003\012\005\015\006\010\007\011\010\006\011\014\014" +
    "\ufff3\032\007\001\002\000\004\014\ufff8\001\002\000\014" +
    "\013\uff18\042\uff14\051\uff14\052\uff14\056\uff14\001\002\000" +
    "\014\013\uff16\042\uff12\051\uff12\052\uff12\056\uff12\001\002" +
    "\000\014\013\uff19\042\uff15\051\uff15\052\uff15\056\uff15\001" +
    "\002\000\014\013\uff17\042\uff13\051\uff13\052\uff13\056\uff13" +
    "\001\002\000\012\042\uff1a\051\uff1a\052\uff1a\056\uff1a\001" +
    "\002\000\004\013\051\001\002\000\022\003\012\005\015" +
    "\006\010\007\011\010\006\011\014\014\ufff3\032\007\001" +
    "\002\000\004\014\ufff9\001\002\000\070\004\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\032\uff8d\033\uff8d" +
    "\042\uff8d\044\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\001\002" +
    "\000\070\004\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\032\uff8e\033\uff8e\042\uff8e\044\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\055\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\001\002\000\070\004\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\032\uff98\033\uff98\042" +
    "\uff98\044\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\055\uff98\056\uff98\057\uff98\060\uff98\001\002\000" +
    "\070\004\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f" +
    "\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025" +
    "\uff7f\032\uff7f\033\uff7f\042\uff7f\044\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\060\uff7f\001\002\000\070\004\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\032\uff89\033\uff89\042\uff89" +
    "\044\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053" +
    "\uff89\055\uff89\056\uff89\057\uff89\060\uff89\001\002\000\070" +
    "\004\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\032\uff95\033\uff95\042\uff95\044\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\001\002\000\070\004\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\032\uff96\033\uff96\042\uff96\044" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\055\uff96\056\uff96\057\uff96\060\uff96\001\002\000\066\004" +
    "\057\012\071\013\105\015\054\016\053\017\104\020\066" +
    "\021\103\022\067\023\072\024\070\025\074\032\007\033" +
    "\112\042\107\044\075\046\076\047\065\050\063\051\114" +
    "\052\115\053\073\055\106\056\110\057\056\060\101\001" +
    "\002\000\070\004\uff85\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\032\uff85\033\uff85\042\uff85\044\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\001\002\000\070\004\uff92\012\uff92" +
    "\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\024\uff92\025\uff92\032\uff92\033\uff92" +
    "\042\uff92\044\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\055\uff92\056\uff92\057\uff92\060\uff92\001\002" +
    "\000\070\004\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\032\uff86\033\uff86\042\uff86\044\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\053\uff86\055\uff86\056\uff86" +
    "\057\uff86\060\uff86\001\002\000\070\004\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\032\uff8b\033\uff8b\042" +
    "\uff8b\044\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\001\002\000" +
    "\070\004\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81" +
    "\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025" +
    "\uff81\032\uff81\033\uff81\042\uff81\044\uff81\046\uff81\047\uff81" +
    "\050\uff81\051\uff81\052\uff81\053\uff81\055\uff81\056\uff81\057" +
    "\uff81\060\uff81\001\002\000\070\004\uff87\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\025\uff87\032\uff87\033\uff87\042\uff87" +
    "\044\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\055\uff87\056\uff87\057\uff87\060\uff87\001\002\000\070" +
    "\004\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\032\uff91\033\uff91\042\uff91\044\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\001\002\000\070\004\uff88\012\uff88\013\uff88\014" +
    "\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\032\uff88\033\uff88\042\uff88\044" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88" +
    "\055\uff88\056\uff88\057\uff88\060\uff88\001\002\000\070\004" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\032" +
    "\uff90\033\uff90\042\uff90\044\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\055\uff90\056\uff90\057\uff90\060" +
    "\uff90\001\002\000\070\004\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\024\uff84\025\uff84\032\uff84\033\uff84\042\uff84\044\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\055" +
    "\uff84\056\uff84\057\uff84\060\uff84\001\002\000\070\004\uff83" +
    "\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\032\uff83" +
    "\033\uff83\042\uff83\044\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\055\uff83\056\uff83\057\uff83\060\uff83" +
    "\001\002\000\070\004\uff80\012\uff80\013\uff80\014\uff80\015" +
    "\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80" +
    "\024\uff80\025\uff80\032\uff80\033\uff80\042\uff80\044\uff80\046" +
    "\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\055\uff80" +
    "\056\uff80\057\uff80\060\uff80\001\002\000\070\004\uff97\012" +
    "\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\032\uff97\033" +
    "\uff97\042\uff97\044\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060\uff97\001" +
    "\002\000\070\004\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024" +
    "\uff94\025\uff94\032\uff94\033\uff94\042\uff94\044\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\055\uff94\056" +
    "\uff94\057\uff94\060\uff94\001\002\000\070\004\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021" +
    "\uff82\022\uff82\023\uff82\024\uff82\025\uff82\032\uff82\033\uff82" +
    "\042\uff82\044\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\055\uff82\056\uff82\057\uff82\060\uff82\001\002" +
    "\000\070\004\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\032\uff93\033\uff93\042\uff93\044\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\001\002\000\070\004\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\025\uff8a\032\uff8a\033\uff8a\042" +
    "\uff8a\044\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\001\002\000" +
    "\070\004\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\032\uff8c\033\uff8c\042\uff8c\044\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\001\002\000\070\004\uff8f\012\uff8f\013\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\032\uff8f\033\uff8f\042\uff8f" +
    "\044\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\001\002\000\070" +
    "\004\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\032\uff9f\033\uff9f\042\uff9f\044\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\001\002\000\070\004\uff9a\012\uff9a\013\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\032\uff9a\033\uff9a\042\uff9a\044" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\055\uff9a\056\uff9a\057\uff9a\060\uff9a\001\002\000\070\004" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\032" +
    "\uff9d\033\uff9d\042\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\001\002\000\070\004\uff99\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\032\uff99\033\uff99\042\uff99\044\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\001\002\000\106\003\uff10" +
    "\004\uff10\005\uff10\006\uff10\007\uff10\010\uff10\011\uff10\012" +
    "\uff10\013\uff10\014\uff10\015\uff10\016\uff10\017\uff10\020\uff10" +
    "\021\uff10\022\uff10\023\uff10\024\uff10\025\uff10\032\uff10\033" +
    "\uff10\042\uff10\044\uff10\046\uff10\047\uff10\050\uff10\051\uff10" +
    "\052\uff10\053\uff10\055\uff10\056\uff10\057\uff10\060\uff10\061" +
    "\uff10\001\002\000\070\004\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\025\uff9e\032\uff9e\033\uff9e\042\uff9e\044\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\001\002\000\070\004\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\032\uff9c" +
    "\033\uff9c\042\uff9c\044\uff9c\046\uff9c\047\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\001\002\000\070\004\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\032\uff9b\033\uff9b\042\uff9b\044\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\001\002\000\004\042\117\001" +
    "\002\000\004\013\120\001\002\000\022\003\012\005\015" +
    "\006\010\007\011\010\006\011\014\014\ufff3\032\007\001" +
    "\002\000\004\014\ufff7\001\002\000\004\014\123\001\002" +
    "\000\066\004\057\012\071\013\105\014\ufff1\015\054\016" +
    "\053\017\104\020\066\021\103\022\067\023\072\024\070" +
    "\025\074\032\007\042\061\044\075\046\076\047\065\050" +
    "\063\051\100\052\102\053\073\055\055\056\060\057\056" +
    "\060\101\001\002\000\004\014\uffff\001\002\000\066\004" +
    "\057\012\071\013\105\014\ufff2\015\054\016\053\017\104" +
    "\020\066\021\103\022\067\023\072\024\070\025\074\032" +
    "\007\042\107\044\075\046\076\047\065\050\063\051\114" +
    "\052\115\053\073\055\106\056\110\057\056\060\101\001" +
    "\002\000\004\014\127\001\002\000\016\003\132\032\007" +
    "\051\130\052\135\056\134\057\133\001\002\000\004\044" +
    "\u0160\001\002\000\004\014\ufffe\001\002\000\020\003\140" +
    "\014\uffe4\032\007\051\137\052\143\056\142\057\141\001" +
    "\002\000\004\044\303\001\002\000\004\044\277\001\002" +
    "\000\004\044\273\001\002\000\020\003\140\014\uffe4\032" +
    "\007\051\137\052\143\056\142\057\141\001\002\000\004" +
    "\044\267\001\002\000\020\003\140\014\uffe4\032\007\051" +
    "\137\052\143\056\142\057\141\001\002\000\004\044\262" +
    "\001\002\000\004\044\256\001\002\000\004\044\147\001" +
    "\002\000\004\014\uffec\001\002\000\020\003\140\014\uffe4" +
    "\032\007\051\137\052\143\056\142\057\141\001\002\000" +
    "\004\014\uffe6\001\002\000\010\015\154\022\151\023\153" +
    "\001\002\000\024\013\uffd6\015\154\017\204\020\205\021" +
    "\206\022\151\023\153\024\uffd6\046\201\001\002\000\056" +
    "\004\222\012\230\013\245\015\217\016\216\017\244\020" +
    "\226\021\243\023\231\024\227\025\233\044\234\046\235" +
    "\047\225\050\224\051\237\052\241\053\232\055\220\056" +
    "\223\057\221\060\236\001\002\000\004\013\214\001\002" +
    "\000\010\015\154\022\151\023\153\001\002\000\020\016" +
    "\uffd0\026\163\027\160\030\157\042\156\051\155\052\161" +
    "\001\002\000\006\016\uffdd\025\uffdd\001\002\000\004\025" +
    "\174\001\002\000\012\016\uffd0\026\163\027\160\030\157" +
    "\001\002\000\012\016\uffd0\026\163\027\160\030\157\001" +
    "\002\000\006\016\uffdc\025\uffdc\001\002\000\004\025\167" +
    "\001\002\000\012\016\uffd0\026\163\027\160\030\157\001" +
    "\002\000\004\016\165\001\002\000\024\013\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\046" +
    "\uffdf\001\002\000\004\016\uffd3\001\002\000\006\051\155" +
    "\052\161\001\002\000\004\016\171\001\002\000\024\013" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\046\uffe0\001\002\000\004\016\uffd2\001\002\000" +
    "\004\016\uffd1\001\002\000\004\042\175\001\002\000\004" +
    "\016\176\001\002\000\024\013\uffe1\015\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\046\uffe1\001\002" +
    "\000\004\024\200\001\002\000\024\013\uffd6\015\154\017" +
    "\204\020\205\021\206\022\151\023\153\024\uffd6\046\201" +
    "\001\002\000\014\013\uffd4\015\154\022\151\023\153\024" +
    "\uffd4\001\002\000\006\013\uffe3\024\uffe3\001\002\000\006" +
    "\013\uffd7\024\uffd7\001\002\000\014\013\uffd4\015\154\022" +
    "\151\023\153\024\uffd4\001\002\000\014\013\uffd4\015\154" +
    "\022\151\023\153\024\uffd4\001\002\000\014\013\uffd4\015" +
    "\154\022\151\023\153\024\uffd4\001\002\000\006\013\uffd5" +
    "\024\uffd5\001\002\000\006\013\uffd8\024\uffd8\001\002\000" +
    "\006\013\uffd9\024\uffd9\001\002\000\006\013\uffda\024\uffda" +
    "\001\002\000\006\013\uffdb\024\uffdb\001\002\000\020\003" +
    "\140\014\uffe4\032\007\051\137\052\143\056\142\057\141" +
    "\001\002\000\004\014\uffe8\001\002\000\062\004\uff6f\012" +
    "\uff6f\013\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f" +
    "\022\uff6f\023\uff6f\024\uff6f\025\uff6f\042\uff6f\044\uff6f\046" +
    "\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\055\uff6f" +
    "\056\uff6f\057\uff6f\060\uff6f\001\002\000\062\004\uff70\012" +
    "\uff70\013\uff70\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70" +
    "\022\uff70\023\uff70\024\uff70\025\uff70\042\uff70\044\uff70\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\055\uff70" +
    "\056\uff70\057\uff70\060\uff70\001\002\000\062\004\uff78\012" +
    "\uff78\013\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\042\uff78\044\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\055\uff78" +
    "\056\uff78\057\uff78\060\uff78\001\002\000\062\004\uff62\012" +
    "\uff62\013\uff62\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62" +
    "\022\uff62\023\uff62\024\uff62\025\uff62\042\uff62\044\uff62\046" +
    "\uff62\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\055\uff62" +
    "\056\uff62\057\uff62\060\uff62\001\002\000\062\004\uff6b\012" +
    "\uff6b\013\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\023\uff6b\024\uff6b\025\uff6b\042\uff6b\044\uff6b\046" +
    "\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\055\uff6b" +
    "\056\uff6b\057\uff6b\060\uff6b\001\002\000\062\004\uff76\012" +
    "\uff76\013\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76" +
    "\022\uff76\023\uff76\024\uff76\025\uff76\042\uff76\044\uff76\046" +
    "\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\055\uff76" +
    "\056\uff76\057\uff76\060\uff76\001\002\000\062\004\uff67\012" +
    "\uff67\013\uff67\015\uff67\016\uff67\017\uff67\020\uff67\021\uff67" +
    "\022\uff67\023\uff67\024\uff67\025\uff67\042\uff67\044\uff67\046" +
    "\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\055\uff67" +
    "\056\uff67\057\uff67\060\uff67\001\002\000\062\004\uff68\012" +
    "\uff68\013\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68" +
    "\022\uff68\023\uff68\024\uff68\025\uff68\042\uff68\044\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\055\uff68" +
    "\056\uff68\057\uff68\060\uff68\001\002\000\062\004\uff6d\012" +
    "\uff6d\013\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d" +
    "\022\uff6d\023\uff6d\024\uff6d\025\uff6d\042\uff6d\044\uff6d\046" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\055\uff6d" +
    "\056\uff6d\057\uff6d\060\uff6d\001\002\000\062\004\uff69\012" +
    "\uff69\013\uff69\015\uff69\016\uff69\017\uff69\020\uff69\021\uff69" +
    "\022\uff69\023\uff69\024\uff69\025\uff69\042\uff69\044\uff69\046" +
    "\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\055\uff69" +
    "\056\uff69\057\uff69\060\uff69\001\002\000\062\004\uff73\012" +
    "\uff73\013\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\023\uff73\024\uff73\025\uff73\042\uff73\044\uff73\046" +
    "\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\055\uff73" +
    "\056\uff73\057\uff73\060\uff73\001\002\000\062\004\uff6a\012" +
    "\uff6a\013\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a" +
    "\022\uff6a\023\uff6a\024\uff6a\025\uff6a\042\uff6a\044\uff6a\046" +
    "\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\055\uff6a" +
    "\056\uff6a\057\uff6a\060\uff6a\001\002\000\062\004\uff72\012" +
    "\uff72\013\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72" +
    "\022\uff72\023\uff72\024\uff72\025\uff72\042\uff72\044\uff72\046" +
    "\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\055\uff72" +
    "\056\uff72\057\uff72\060\uff72\001\002\000\062\004\uff66\012" +
    "\uff66\013\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66" +
    "\022\uff66\023\uff66\024\uff66\025\uff66\042\uff66\044\uff66\046" +
    "\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\055\uff66" +
    "\056\uff66\057\uff66\060\uff66\001\002\000\062\004\uff65\012" +
    "\uff65\013\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65" +
    "\022\uff65\023\uff65\024\uff65\025\uff65\042\uff65\044\uff65\046" +
    "\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\055\uff65" +
    "\056\uff65\057\uff65\060\uff65\001\002\000\062\004\uff63\012" +
    "\uff63\013\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63" +
    "\022\uff63\023\uff63\024\uff63\025\uff63\042\uff63\044\uff63\046" +
    "\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\055\uff63" +
    "\056\uff63\057\uff63\060\uff63\001\002\000\062\004\uff64\012" +
    "\uff64\013\uff64\015\uff64\016\uff64\017\uff64\020\uff64\021\uff64" +
    "\022\uff64\023\uff64\024\uff64\025\uff64\042\uff64\044\uff64\046" +
    "\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64\055\uff64" +
    "\056\uff64\057\uff64\060\uff64\001\002\000\062\004\uff75\012" +
    "\uff75\013\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75" +
    "\022\uff75\023\uff75\024\uff75\025\uff75\042\uff75\044\uff75\046" +
    "\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\055\uff75" +
    "\056\uff75\057\uff75\060\uff75\001\002\000\062\004\222\012" +
    "\230\013\245\015\217\016\216\017\244\020\226\021\243" +
    "\022\251\023\231\024\227\025\233\042\247\044\234\046" +
    "\235\047\225\050\224\051\252\052\253\053\232\055\246" +
    "\056\250\057\221\060\236\001\002\000\062\004\uff74\012" +
    "\uff74\013\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74" +
    "\022\uff74\023\uff74\024\uff74\025\uff74\042\uff74\044\uff74\046" +
    "\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\055\uff74" +
    "\056\uff74\057\uff74\060\uff74\001\002\000\062\004\uff77\012" +
    "\uff77\013\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77" +
    "\022\uff77\023\uff77\024\uff77\025\uff77\042\uff77\044\uff77\046" +
    "\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\055\uff77" +
    "\056\uff77\057\uff77\060\uff77\001\002\000\062\004\uff6c\012" +
    "\uff6c\013\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\042\uff6c\044\uff6c\046" +
    "\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\055\uff6c" +
    "\056\uff6c\057\uff6c\060\uff6c\001\002\000\062\004\uff6e\012" +
    "\uff6e\013\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e" +
    "\022\uff6e\023\uff6e\024\uff6e\025\uff6e\042\uff6e\044\uff6e\046" +
    "\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\055\uff6e" +
    "\056\uff6e\057\uff6e\060\uff6e\001\002\000\062\004\uff71\012" +
    "\uff71\013\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\042\uff71\044\uff71\046" +
    "\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\055\uff71" +
    "\056\uff71\057\uff71\060\uff71\001\002\000\062\004\uff7e\012" +
    "\uff7e\013\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\042\uff7e\044\uff7e\046" +
    "\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\055\uff7e" +
    "\056\uff7e\057\uff7e\060\uff7e\001\002\000\062\004\uff79\012" +
    "\uff79\013\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79" +
    "\022\uff79\023\uff79\024\uff79\025\uff79\042\uff79\044\uff79\046" +
    "\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\055\uff79" +
    "\056\uff79\057\uff79\060\uff79\001\002\000\062\004\uff7c\012" +
    "\uff7c\013\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c" +
    "\022\uff7c\023\uff7c\024\uff7c\025\uff7c\042\uff7c\044\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\055\uff7c" +
    "\056\uff7c\057\uff7c\060\uff7c\001\002\000\024\013\uffde\015" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\046\uffde\001\002\000\062\004\uff7b\012\uff7b\013\uff7b\015" +
    "\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b" +
    "\024\uff7b\025\uff7b\042\uff7b\044\uff7b\046\uff7b\047\uff7b\050" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\060\uff7b\001\002\000\062\004\uff7a\012\uff7a\013\uff7a\015" +
    "\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a" +
    "\024\uff7a\025\uff7a\042\uff7a\044\uff7a\046\uff7a\047\uff7a\050" +
    "\uff7a\051\uff7a\052\uff7a\053\uff7a\055\uff7a\056\uff7a\057\uff7a" +
    "\060\uff7a\001\002\000\062\004\uff7d\012\uff7d\013\uff7d\015" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\042\uff7d\044\uff7d\046\uff7d\047\uff7d\050" +
    "\uff7d\051\uff7d\052\uff7d\053\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\060\uff7d\001\002\000\006\013\uffe2\024\uffe2\001\002\000" +
    "\010\015\154\022\151\023\153\001\002\000\004\013\260" +
    "\001\002\000\020\003\140\014\uffe4\032\007\051\137\052" +
    "\143\056\142\057\141\001\002\000\004\014\uffea\001\002" +
    "\000\010\015\154\022\151\023\153\001\002\000\004\013" +
    "\264\001\002\000\020\003\140\014\uffe4\032\007\051\137" +
    "\052\143\056\142\057\141\001\002\000\004\014\uffe7\001" +
    "\002\000\004\014\uffe5\001\002\000\010\015\154\022\151" +
    "\023\153\001\002\000\004\013\271\001\002\000\020\003" +
    "\140\014\uffe4\032\007\051\137\052\143\056\142\057\141" +
    "\001\002\000\004\014\uffe9\001\002\000\010\015\154\022" +
    "\151\023\153\001\002\000\004\013\275\001\002\000\020" +
    "\003\140\014\uffe4\032\007\051\137\052\143\056\142\057" +
    "\141\001\002\000\004\014\uffee\001\002\000\010\015\154" +
    "\022\151\023\153\001\002\000\004\013\301\001\002\000" +
    "\020\003\140\014\uffe4\032\007\051\137\052\143\056\142" +
    "\057\141\001\002\000\004\014\ufff0\001\002\000\010\015" +
    "\154\022\151\023\153\001\002\000\004\013\305\001\002" +
    "\000\020\003\140\014\uffe4\032\007\051\137\052\143\056" +
    "\142\057\141\001\002\000\004\014\uffed\001\002\000\004" +
    "\014\uffeb\001\002\000\004\014\311\001\002\000\014\003" +
    "\uff0e\014\uff0e\032\313\034\uff0e\035\uff0e\001\002\000\004" +
    "\014\ufffd\001\002\000\064\004\057\012\071\013\105\015" +
    "\054\016\053\017\104\020\066\021\103\022\067\023\072" +
    "\024\070\025\074\032\007\042\061\044\075\046\076\047" +
    "\065\050\063\051\100\052\102\053\073\055\055\056\060" +
    "\057\056\060\101\001\002\000\012\003\316\014\uffc7\034" +
    "\320\035\317\001\002\000\004\014\uffcf\001\002\000\012" +
    "\003\316\014\uffc7\034\320\035\317\001\002\000\012\036" +
    "\323\037\321\040\322\052\uffc3\001\002\000\012\036\323" +
    "\037\321\040\322\051\uffc3\001\002\000\006\051\uffc5\052" +
    "\uffc5\001\002\000\006\051\uffc4\052\uffc4\001\002\000\006" +
    "\051\uffc6\052\uffc6\001\002\000\004\051\uffce\001\002\000" +
    "\004\051\326\001\002\000\006\004\327\013\uffc1\001\002" +
    "\000\004\051\335\001\002\000\004\013\uffcd\001\002\000" +
    "\004\013\332\001\002\000\014\003\uff0e\014\uff0e\032\313" +
    "\034\uff0e\035\uff0e\001\002\000\012\003\316\014\uffc7\034" +
    "\320\035\317\001\002\000\004\014\uffcc\001\002\000\006" +
    "\004\327\013\uffc1\001\002\000\004\013\uffc2\001\002\000" +
    "\004\052\uffcb\001\002\000\004\052\341\001\002\000\006" +
    "\004\342\013\uffbf\001\002\000\004\052\350\001\002\000" +
    "\004\013\uffca\001\002\000\004\013\345\001\002\000\014" +
    "\003\uff0e\014\uff0e\032\313\034\uff0e\035\uff0e\001\002\000" +
    "\012\003\316\014\uffc7\034\320\035\317\001\002\000\004" +
    "\014\uffc9\001\002\000\006\004\342\013\uffbf\001\002\000" +
    "\004\013\uffc0\001\002\000\004\014\uffc8\001\002\000\066" +
    "\004\057\012\071\013\105\015\054\016\053\017\104\020" +
    "\066\021\103\022\067\023\072\024\070\025\074\032\007" +
    "\033\354\042\107\044\075\046\076\047\065\050\063\051" +
    "\114\052\115\053\073\055\106\056\110\057\056\060\101" +
    "\001\002\000\012\003\uff0f\014\uff0f\034\uff0f\035\uff0f\001" +
    "\002\000\004\014\356\001\002\000\012\003\357\014\uffba" +
    "\032\007\052\360\001\002\000\012\003\357\014\uffba\032" +
    "\007\052\360\001\002\000\004\012\365\001\002\000\012" +
    "\003\357\014\uffba\032\007\052\360\001\002\000\004\014" +
    "\363\001\002\000\004\002\ufffc\001\002\000\004\014\uffbc" +
    "\001\002\000\004\012\366\001\002\000\014\013\uffa9\047" +
    "\373\051\367\052\374\056\371\001\002\000\016\012\376" +
    "\013\uffb4\047\uffb4\051\uffb4\052\uffb4\056\uffb4\001\002\000" +
    "\004\013\u015b\001\002\000\016\012\376\013\uffb4\047\uffb4" +
    "\051\uffb4\052\uffb4\056\uffb4\001\002\000\006\013\uffa9\047" +
    "\373\001\002\000\022\032\007\042\u0111\050\u010c\051\u010b" +
    "\052\u010f\055\u0110\056\u0113\061\u0114\001\002\000\016\012" +
    "\376\013\uffb4\047\uffb4\051\uffb4\052\uffb4\056\uffb4\001\002" +
    "\000\014\013\uffac\047\uffac\051\u0101\052\u0104\056\u0103\001" +
    "\002\000\006\051\377\056\u0100\001\002\000\014\013\uffb6" +
    "\047\uffb6\051\uffb6\052\uffb6\056\uffb6\001\002\000\014\013" +
    "\uffb5\047\uffb5\051\uffb5\052\uffb5\056\uffb5\001\002\000\016" +
    "\012\376\013\uffb4\047\uffb4\051\uffb4\052\uffb4\056\uffb4\001" +
    "\002\000\006\013\uffb7\047\uffb7\001\002\000\016\012\376" +
    "\013\uffb4\047\uffb4\051\uffb4\052\uffb4\056\uffb4\001\002\000" +
    "\016\012\376\013\uffb4\047\uffb4\051\uffb4\052\uffb4\056\uffb4" +
    "\001\002\000\014\013\uffac\047\uffac\051\u0101\052\u0104\056" +
    "\u0103\001\002\000\006\013\uffad\047\uffad\001\002\000\014" +
    "\013\uffac\047\uffac\051\u0101\052\u0104\056\u0103\001\002\000" +
    "\006\013\uffaf\047\uffaf\001\002\000\014\013\uffac\047\uffac" +
    "\051\u0101\052\u0104\056\u0103\001\002\000\006\013\uffae\047" +
    "\uffae\001\002\000\066\004\uff25\012\uff25\013\uff25\015\uff25" +
    "\016\uff25\017\uff25\020\uff25\021\uff25\022\uff25\023\uff25\024" +
    "\uff25\025\uff25\032\uff25\042\uff25\044\uff25\046\uff25\047\uff25" +
    "\050\uff25\051\uff25\052\uff25\053\uff25\055\uff25\056\uff25\057" +
    "\uff25\060\uff25\061\uff25\001\002\000\004\013\uffaa\001\002" +
    "\000\004\050\u0155\001\002\000\066\004\u013d\012\u0144\013" +
    "\u0151\015\u013b\016\u0139\017\u0150\020\u0140\021\u014f\022\u0143" +
    "\023\u0146\024\u0145\025\u0148\032\007\042\u013e\044\u014a\046" +
    "\u014b\047\u0142\050\uffa6\051\u014c\052\u014e\053\u0149\055\u013a" +
    "\056\u013f\057\u013c\060\u014d\061\u0147\001\002\000\066\004" +
    "\uff24\012\uff24\013\uff24\015\uff24\016\uff24\017\uff24\020\uff24" +
    "\021\uff24\022\uff24\023\uff24\024\uff24\025\uff24\032\uff24\042" +
    "\uff24\044\uff24\046\uff24\047\uff24\050\uff24\051\uff24\052\uff24" +
    "\053\uff24\055\uff24\056\uff24\057\uff24\060\uff24\061\uff24\001" +
    "\002\000\066\004\uff28\012\uff28\013\uff28\015\uff28\016\uff28" +
    "\017\uff28\020\uff28\021\uff28\022\uff28\023\uff28\024\uff28\025" +
    "\uff28\032\uff28\042\uff28\044\uff28\046\uff28\047\uff28\050\uff28" +
    "\051\uff28\052\uff28\053\uff28\055\uff28\056\uff28\057\uff28\060" +
    "\uff28\061\uff28\001\002\000\066\004\uff27\012\uff27\013\uff27" +
    "\015\uff27\016\uff27\017\uff27\020\uff27\021\uff27\022\uff27\023" +
    "\uff27\024\uff27\025\uff27\032\uff27\042\uff27\044\uff27\046\uff27" +
    "\047\uff27\050\uff27\051\uff27\052\uff27\053\uff27\055\uff27\056" +
    "\uff27\057\uff27\060\uff27\061\uff27\001\002\000\066\004\uff23" +
    "\012\uff23\013\uff23\015\uff23\016\uff23\017\uff23\020\uff23\021" +
    "\uff23\022\uff23\023\uff23\024\uff23\025\uff23\032\uff23\042\uff23" +
    "\044\uff23\046\uff23\047\uff23\050\uff23\051\uff23\052\uff23\053" +
    "\uff23\055\uff23\056\uff23\057\uff23\060\uff23\061\uff23\001\002" +
    "\000\066\004\uff26\012\uff26\013\uff26\015\uff26\016\uff26\017" +
    "\uff26\020\uff26\021\uff26\022\uff26\023\uff26\024\uff26\025\uff26" +
    "\032\uff26\042\uff26\044\uff26\046\uff26\047\uff26\050\uff26\051" +
    "\uff26\052\uff26\053\uff26\055\uff26\056\uff26\057\uff26\060\uff26" +
    "\061\uff26\001\002\000\004\044\u0115\001\002\000\062\004" +
    "\u011b\012\u0124\015\u0118\016\u0117\017\u012d\020\u0121\021\u012e" +
    "\022\u0122\023\u0125\024\u0123\025\u0127\032\007\042\u011d\044" +
    "\u0128\046\u0129\047\u0120\050\u011e\051\u012b\052\u012c\053\u0126" +
    "\055\u0119\056\u011c\057\u011a\060\u012a\001\002\000\064\004" +
    "\uff59\012\uff59\013\uff59\015\uff59\016\uff59\017\uff59\020\uff59" +
    "\021\uff59\022\uff59\023\uff59\024\uff59\025\uff59\032\uff59\042" +
    "\uff59\044\uff59\046\uff59\047\uff59\050\uff59\051\uff59\052\uff59" +
    "\053\uff59\055\uff59\056\uff59\057\uff59\060\uff59\001\002\000" +
    "\064\004\uff50\012\uff50\013\uff50\015\uff50\016\uff50\017\uff50" +
    "\020\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025\uff50\032" +
    "\uff50\042\uff50\044\uff50\046\uff50\047\uff50\050\uff50\051\uff50" +
    "\052\uff50\053\uff50\055\uff50\056\uff50\057\uff50\060\uff50\001" +
    "\002\000\064\004\uff51\012\uff51\013\uff51\015\uff51\016\uff51" +
    "\017\uff51\020\uff51\021\uff51\022\uff51\023\uff51\024\uff51\025" +
    "\uff51\032\uff51\042\uff51\044\uff51\046\uff51\047\uff51\050\uff51" +
    "\051\uff51\052\uff51\053\uff51\055\uff51\056\uff51\057\uff51\060" +
    "\uff51\001\002\000\064\004\uff5a\012\uff5a\013\uff5a\015\uff5a" +
    "\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024" +
    "\uff5a\025\uff5a\032\uff5a\042\uff5a\044\uff5a\046\uff5a\047\uff5a" +
    "\050\uff5a\051\uff5a\052\uff5a\053\uff5a\055\uff5a\056\uff5a\057" +
    "\uff5a\060\uff5a\001\002\000\064\004\uff42\012\uff42\013\uff42" +
    "\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023" +
    "\uff42\024\uff42\025\uff42\032\uff42\042\uff42\044\uff42\046\uff42" +
    "\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42\055\uff42\056" +
    "\uff42\057\uff42\060\uff42\001\002\000\064\004\uff4c\012\uff4c" +
    "\013\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c\022" +
    "\uff4c\023\uff4c\024\uff4c\025\uff4c\032\uff4c\042\uff4c\044\uff4c" +
    "\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\055" +
    "\uff4c\056\uff4c\057\uff4c\060\uff4c\001\002\000\064\004\uff57" +
    "\012\uff57\013\uff57\015\uff57\016\uff57\017\uff57\020\uff57\021" +
    "\uff57\022\uff57\023\uff57\024\uff57\025\uff57\032\uff57\042\uff57" +
    "\044\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57\053" +
    "\uff57\055\uff57\056\uff57\057\uff57\060\uff57\001\002\000\064" +
    "\004\uff58\012\uff58\013\uff58\015\uff58\016\uff58\017\uff58\020" +
    "\uff58\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58\032\uff58" +
    "\042\uff58\044\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052" +
    "\uff58\053\uff58\055\uff58\056\uff58\057\uff58\060\uff58\001\002" +
    "\000\064\004\uff47\012\uff47\013\uff47\015\uff47\016\uff47\017" +
    "\uff47\020\uff47\021\uff47\022\uff47\023\uff47\024\uff47\025\uff47" +
    "\032\uff47\042\uff47\044\uff47\046\uff47\047\uff47\050\uff47\051" +
    "\uff47\052\uff47\053\uff47\055\uff47\056\uff47\057\uff47\060\uff47" +
    "\001\002\000\064\004\uff54\012\uff54\013\uff54\015\uff54\016" +
    "\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54\024\uff54" +
    "\025\uff54\032\uff54\042\uff54\044\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\052\uff54\053\uff54\055\uff54\056\uff54\057\uff54" +
    "\060\uff54\001\002\000\064\004\uff48\012\uff48\013\uff48\015" +
    "\uff48\016\uff48\017\uff48\020\uff48\021\uff48\022\uff48\023\uff48" +
    "\024\uff48\025\uff48\032\uff48\042\uff48\044\uff48\046\uff48\047" +
    "\uff48\050\uff48\051\uff48\052\uff48\053\uff48\055\uff48\056\uff48" +
    "\057\uff48\060\uff48\001\002\000\064\004\uff4e\012\uff4e\013" +
    "\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\023\uff4e\024\uff4e\025\uff4e\032\uff4e\042\uff4e\044\uff4e\046" +
    "\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e\055\uff4e" +
    "\056\uff4e\057\uff4e\060\uff4e\001\002\000\064\004\uff44\012" +
    "\uff44\013\uff44\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44" +
    "\022\uff44\023\uff44\024\uff44\025\uff44\032\uff44\042\uff44\044" +
    "\uff44\046\uff44\047\uff44\050\uff44\051\uff44\052\uff44\053\uff44" +
    "\055\uff44\056\uff44\057\uff44\060\uff44\001\002\000\064\004" +
    "\uff49\012\uff49\013\uff49\015\uff49\016\uff49\017\uff49\020\uff49" +
    "\021\uff49\022\uff49\023\uff49\024\uff49\025\uff49\032\uff49\042" +
    "\uff49\044\uff49\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49" +
    "\053\uff49\055\uff49\056\uff49\057\uff49\060\uff49\001\002\000" +
    "\064\004\uff53\012\uff53\013\uff53\015\uff53\016\uff53\017\uff53" +
    "\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53\032" +
    "\uff53\042\uff53\044\uff53\046\uff53\047\uff53\050\uff53\051\uff53" +
    "\052\uff53\053\uff53\055\uff53\056\uff53\057\uff53\060\uff53\001" +
    "\002\000\064\004\uff4a\012\uff4a\013\uff4a\015\uff4a\016\uff4a" +
    "\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025" +
    "\uff4a\032\uff4a\042\uff4a\044\uff4a\046\uff4a\047\uff4a\050\uff4a" +
    "\051\uff4a\052\uff4a\053\uff4a\055\uff4a\056\uff4a\057\uff4a\060" +
    "\uff4a\001\002\000\064\004\uff52\012\uff52\013\uff52\015\uff52" +
    "\016\uff52\017\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024" +
    "\uff52\025\uff52\032\uff52\042\uff52\044\uff52\046\uff52\047\uff52" +
    "\050\uff52\051\uff52\052\uff52\053\uff52\055\uff52\056\uff52\057" +
    "\uff52\060\uff52\001\002\000\064\004\uff46\012\uff46\013\uff46" +
    "\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023" +
    "\uff46\024\uff46\025\uff46\032\uff46\042\uff46\044\uff46\046\uff46" +
    "\047\uff46\050\uff46\051\uff46\052\uff46\053\uff46\055\uff46\056" +
    "\uff46\057\uff46\060\uff46\001\002\000\064\004\uff4b\012\uff4b" +
    "\013\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021\uff4b\022" +
    "\uff4b\023\uff4b\024\uff4b\025\uff4b\032\uff4b\042\uff4b\044\uff4b" +
    "\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\055" +
    "\uff4b\056\uff4b\057\uff4b\060\uff4b\001\002\000\064\004\uff43" +
    "\012\uff43\013\uff43\015\uff43\016\uff43\017\uff43\020\uff43\021" +
    "\uff43\022\uff43\023\uff43\024\uff43\025\uff43\032\uff43\042\uff43" +
    "\044\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052\uff43\053" +
    "\uff43\055\uff43\056\uff43\057\uff43\060\uff43\001\002\000\064" +
    "\004\uff45\012\uff45\013\uff45\015\uff45\016\uff45\017\uff45\020" +
    "\uff45\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45\032\uff45" +
    "\042\uff45\044\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052" +
    "\uff45\053\uff45\055\uff45\056\uff45\057\uff45\060\uff45\001\002" +
    "\000\064\004\uff56\012\uff56\013\uff56\015\uff56\016\uff56\017" +
    "\uff56\020\uff56\021\uff56\022\uff56\023\uff56\024\uff56\025\uff56" +
    "\032\uff56\042\uff56\044\uff56\046\uff56\047\uff56\050\uff56\051" +
    "\uff56\052\uff56\053\uff56\055\uff56\056\uff56\057\uff56\060\uff56" +
    "\001\002\000\064\004\uff55\012\uff55\013\uff55\015\uff55\016" +
    "\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024\uff55" +
    "\025\uff55\032\uff55\042\uff55\044\uff55\046\uff55\047\uff55\050" +
    "\uff55\051\uff55\052\uff55\053\uff55\055\uff55\056\uff55\057\uff55" +
    "\060\uff55\001\002\000\064\004\uff4f\012\uff4f\013\uff4f\015" +
    "\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f" +
    "\024\uff4f\025\uff4f\032\uff4f\042\uff4f\044\uff4f\046\uff4f\047" +
    "\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f\055\uff4f\056\uff4f" +
    "\057\uff4f\060\uff4f\001\002\000\064\004\uff4d\012\uff4d\013" +
    "\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d" +
    "\023\uff4d\024\uff4d\025\uff4d\032\uff4d\042\uff4d\044\uff4d\046" +
    "\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d\055\uff4d" +
    "\056\uff4d\057\uff4d\060\uff4d\001\002\000\064\004\u011b\012" +
    "\u0124\013\u0137\015\u0118\016\u0117\017\u012d\020\u0121\021\u012e" +
    "\022\u0122\023\u0125\024\u0123\025\u0127\032\007\042\u0132\044" +
    "\u0128\046\u0129\047\u0120\050\u011e\051\u0135\052\u0136\053\u0126" +
    "\055\u0131\056\u0133\057\u011a\060\u012a\001\002\000\064\004" +
    "\uff60\012\uff60\013\uff60\015\uff60\016\uff60\017\uff60\020\uff60" +
    "\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\032\uff60\042" +
    "\uff60\044\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052\uff60" +
    "\053\uff60\055\uff60\056\uff60\057\uff60\060\uff60\001\002\000" +
    "\064\004\uff61\012\uff61\013\uff61\015\uff61\016\uff61\017\uff61" +
    "\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\032" +
    "\uff61\042\uff61\044\uff61\046\uff61\047\uff61\050\uff61\051\uff61" +
    "\052\uff61\053\uff61\055\uff61\056\uff61\057\uff61\060\uff61\001" +
    "\002\000\064\004\uff5c\012\uff5c\013\uff5c\015\uff5c\016\uff5c" +
    "\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025" +
    "\uff5c\032\uff5c\042\uff5c\044\uff5c\046\uff5c\047\uff5c\050\uff5c" +
    "\051\uff5c\052\uff5c\053\uff5c\055\uff5c\056\uff5c\057\uff5c\060" +
    "\uff5c\001\002\000\064\004\uff5f\012\uff5f\013\uff5f\015\uff5f" +
    "\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024" +
    "\uff5f\025\uff5f\032\uff5f\042\uff5f\044\uff5f\046\uff5f\047\uff5f" +
    "\050\uff5f\051\uff5f\052\uff5f\053\uff5f\055\uff5f\056\uff5f\057" +
    "\uff5f\060\uff5f\001\002\000\064\004\uff5b\012\uff5b\013\uff5b" +
    "\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b\023" +
    "\uff5b\024\uff5b\025\uff5b\032\uff5b\042\uff5b\044\uff5b\046\uff5b" +
    "\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\055\uff5b\056" +
    "\uff5b\057\uff5b\060\uff5b\001\002\000\064\004\uff5e\012\uff5e" +
    "\013\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022" +
    "\uff5e\023\uff5e\024\uff5e\025\uff5e\032\uff5e\042\uff5e\044\uff5e" +
    "\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\055" +
    "\uff5e\056\uff5e\057\uff5e\060\uff5e\001\002\000\064\004\uff5d" +
    "\012\uff5d\013\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d\021" +
    "\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d\032\uff5d\042\uff5d" +
    "\044\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053" +
    "\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\001\002\000\004" +
    "\050\uffa8\001\002\000\066\004\uff2e\012\uff2e\013\uff2e\015" +
    "\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e" +
    "\024\uff2e\025\uff2e\032\uff2e\042\uff2e\044\uff2e\046\uff2e\047" +
    "\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e\055\uff2e\056\uff2e" +
    "\057\uff2e\060\uff2e\061\uff2e\001\002\000\066\004\uff3e\012" +
    "\uff3e\013\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e" +
    "\022\uff3e\023\uff3e\024\uff3e\025\uff3e\032\uff3e\042\uff3e\044" +
    "\uff3e\046\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e" +
    "\055\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\001\002\000" +
    "\066\004\uff2f\012\uff2f\013\uff2f\015\uff2f\016\uff2f\017\uff2f" +
    "\020\uff2f\021\uff2f\022\uff2f\023\uff2f\024\uff2f\025\uff2f\032" +
    "\uff2f\042\uff2f\044\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f" +
    "\052\uff2f\053\uff2f\055\uff2f\056\uff2f\057\uff2f\060\uff2f\061" +
    "\uff2f\001\002\000\066\004\uff3f\012\uff3f\013\uff3f\015\uff3f" +
    "\016\uff3f\017\uff3f\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024" +
    "\uff3f\025\uff3f\032\uff3f\042\uff3f\044\uff3f\046\uff3f\047\uff3f" +
    "\050\uff3f\051\uff3f\052\uff3f\053\uff3f\055\uff3f\056\uff3f\057" +
    "\uff3f\060\uff3f\061\uff3f\001\002\000\066\004\uff30\012\uff30" +
    "\013\uff30\015\uff30\016\uff30\017\uff30\020\uff30\021\uff30\022" +
    "\uff30\023\uff30\024\uff30\025\uff30\032\uff30\042\uff30\044\uff30" +
    "\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30\053\uff30\055" +
    "\uff30\056\uff30\057\uff30\060\uff30\061\uff30\001\002\000\066" +
    "\004\uff39\012\uff39\013\uff39\015\uff39\016\uff39\017\uff39\020" +
    "\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39\032\uff39" +
    "\042\uff39\044\uff39\046\uff39\047\uff39\050\uff39\051\uff39\052" +
    "\uff39\053\uff39\055\uff39\056\uff39\057\uff39\060\uff39\061\uff39" +
    "\001\002\000\066\004\uff2a\012\uff2a\013\uff2a\015\uff2a\016" +
    "\uff2a\017\uff2a\020\uff2a\021\uff2a\022\uff2a\023\uff2a\024\uff2a" +
    "\025\uff2a\032\uff2a\042\uff2a\044\uff2a\046\uff2a\047\uff2a\050" +
    "\uff2a\051\uff2a\052\uff2a\053\uff2a\055\uff2a\056\uff2a\057\uff2a" +
    "\060\uff2a\061\uff2a\001\002\000\066\004\uff2d\012\uff2d\013" +
    "\uff2d\015\uff2d\016\uff2d\017\uff2d\020\uff2d\021\uff2d\022\uff2d" +
    "\023\uff2d\024\uff2d\025\uff2d\032\uff2d\042\uff2d\044\uff2d\046" +
    "\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\055\uff2d" +
    "\056\uff2d\057\uff2d\060\uff2d\061\uff2d\001\002\000\066\004" +
    "\uff3b\012\uff3b\013\uff3b\015\uff3b\016\uff3b\017\uff3b\020\uff3b" +
    "\021\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b\032\uff3b\042" +
    "\uff3b\044\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b" +
    "\053\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\001" +
    "\002\000\066\004\uff29\012\uff29\013\uff29\015\uff29\016\uff29" +
    "\017\uff29\020\uff29\021\uff29\022\uff29\023\uff29\024\uff29\025" +
    "\uff29\032\uff29\042\uff29\044\uff29\046\uff29\047\uff29\050\uff29" +
    "\051\uff29\052\uff29\053\uff29\055\uff29\056\uff29\057\uff29\060" +
    "\uff29\061\uff29\001\002\000\066\004\uff35\012\uff35\013\uff35" +
    "\015\uff35\016\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023" +
    "\uff35\024\uff35\025\uff35\032\uff35\042\uff35\044\uff35\046\uff35" +
    "\047\uff35\050\uff35\051\uff35\052\uff35\053\uff35\055\uff35\056" +
    "\uff35\057\uff35\060\uff35\061\uff35\001\002\000\066\004\uff32" +
    "\012\uff32\013\uff32\015\uff32\016\uff32\017\uff32\020\uff32\021" +
    "\uff32\022\uff32\023\uff32\024\uff32\025\uff32\032\uff32\042\uff32" +
    "\044\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053" +
    "\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32\001\002" +
    "\000\066\004\uff41\012\uff41\013\uff41\015\uff41\016\uff41\017" +
    "\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41" +
    "\032\uff41\042\uff41\044\uff41\046\uff41\047\uff41\050\uff41\051" +
    "\uff41\052\uff41\053\uff41\055\uff41\056\uff41\057\uff41\060\uff41" +
    "\061\uff41\001\002\000\066\004\uff36\012\uff36\013\uff36\015" +
    "\uff36\016\uff36\017\uff36\020\uff36\021\uff36\022\uff36\023\uff36" +
    "\024\uff36\025\uff36\032\uff36\042\uff36\044\uff36\046\uff36\047" +
    "\uff36\050\uff36\051\uff36\052\uff36\053\uff36\055\uff36\056\uff36" +
    "\057\uff36\060\uff36\061\uff36\001\002\000\066\004\uff37\012" +
    "\uff37\013\uff37\015\uff37\016\uff37\017\uff37\020\uff37\021\uff37" +
    "\022\uff37\023\uff37\024\uff37\025\uff37\032\uff37\042\uff37\044" +
    "\uff37\046\uff37\047\uff37\050\uff37\051\uff37\052\uff37\053\uff37" +
    "\055\uff37\056\uff37\057\uff37\060\uff37\061\uff37\001\002\000" +
    "\004\044\u0152\001\002\000\066\004\uff34\012\uff34\013\uff34" +
    "\015\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023" +
    "\uff34\024\uff34\025\uff34\032\uff34\042\uff34\044\uff34\046\uff34" +
    "\047\uff34\050\uff34\051\uff34\052\uff34\053\uff34\055\uff34\056" +
    "\uff34\057\uff34\060\uff34\061\uff34\001\002\000\066\004\uff40" +
    "\012\uff40\013\uff40\015\uff40\016\uff40\017\uff40\020\uff40\021" +
    "\uff40\022\uff40\023\uff40\024\uff40\025\uff40\032\uff40\042\uff40" +
    "\044\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053" +
    "\uff40\055\uff40\056\uff40\057\uff40\060\uff40\061\uff40\001\002" +
    "\000\066\004\uff38\012\uff38\013\uff38\015\uff38\016\uff38\017" +
    "\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38" +
    "\032\uff38\042\uff38\044\uff38\046\uff38\047\uff38\050\uff38\051" +
    "\uff38\052\uff38\053\uff38\055\uff38\056\uff38\057\uff38\060\uff38" +
    "\061\uff38\001\002\000\066\004\uff31\012\uff31\013\uff31\015" +
    "\uff31\016\uff31\017\uff31\020\uff31\021\uff31\022\uff31\023\uff31" +
    "\024\uff31\025\uff31\032\uff31\042\uff31\044\uff31\046\uff31\047" +
    "\uff31\050\uff31\051\uff31\052\uff31\053\uff31\055\uff31\056\uff31" +
    "\057\uff31\060\uff31\061\uff31\001\002\000\066\004\uff2c\012" +
    "\uff2c\013\uff2c\015\uff2c\016\uff2c\017\uff2c\020\uff2c\021\uff2c" +
    "\022\uff2c\023\uff2c\024\uff2c\025\uff2c\032\uff2c\042\uff2c\044" +
    "\uff2c\046\uff2c\047\uff2c\050\uff2c\051\uff2c\052\uff2c\053\uff2c" +
    "\055\uff2c\056\uff2c\057\uff2c\060\uff2c\061\uff2c\001\002\000" +
    "\066\004\uff33\012\uff33\013\uff33\015\uff33\016\uff33\017\uff33" +
    "\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025\uff33\032" +
    "\uff33\042\uff33\044\uff33\046\uff33\047\uff33\050\uff33\051\uff33" +
    "\052\uff33\053\uff33\055\uff33\056\uff33\057\uff33\060\uff33\061" +
    "\uff33\001\002\000\066\004\uff2b\012\uff2b\013\uff2b\015\uff2b" +
    "\016\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b\024" +
    "\uff2b\025\uff2b\032\uff2b\042\uff2b\044\uff2b\046\uff2b\047\uff2b" +
    "\050\uff2b\051\uff2b\052\uff2b\053\uff2b\055\uff2b\056\uff2b\057" +
    "\uff2b\060\uff2b\061\uff2b\001\002\000\066\004\uff3a\012\uff3a" +
    "\013\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\025\uff3a\032\uff3a\042\uff3a\044\uff3a" +
    "\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\055" +
    "\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\001\002\000\066" +
    "\004\uff3d\012\uff3d\013\uff3d\015\uff3d\016\uff3d\017\uff3d\020" +
    "\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d\032\uff3d" +
    "\042\uff3d\044\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052" +
    "\uff3d\053\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d" +
    "\001\002\000\066\004\uff3c\012\uff3c\013\uff3c\015\uff3c\016" +
    "\uff3c\017\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c" +
    "\025\uff3c\032\uff3c\042\uff3c\044\uff3c\046\uff3c\047\uff3c\050" +
    "\uff3c\051\uff3c\052\uff3c\053\uff3c\055\uff3c\056\uff3c\057\uff3c" +
    "\060\uff3c\061\uff3c\001\002\000\062\004\u011b\012\u0124\015" +
    "\u0118\016\u0117\017\u012d\020\u0121\021\u012e\022\u0122\023\u0125" +
    "\024\u0123\025\u0127\032\007\042\u011d\044\u0128\046\u0129\047" +
    "\u0120\050\u011e\051\u012b\052\u012c\053\u0126\055\u0119\056\u011c" +
    "\057\u011a\060\u012a\001\002\000\064\004\u011b\012\u0124\013" +
    "\u0154\015\u0118\016\u0117\017\u012d\020\u0121\021\u012e\022\u0122" +
    "\023\u0125\024\u0123\025\u0127\032\007\042\u0132\044\u0128\046" +
    "\u0129\047\u0120\050\u011e\051\u0135\052\u0136\053\u0126\055\u0131" +
    "\056\u0133\057\u011a\060\u012a\001\002\000\004\050\uffa7\001" +
    "\002\000\004\013\uffab\001\002\000\004\013\u0157\001\002" +
    "\000\012\003\357\014\uffba\032\007\052\360\001\002\000" +
    "\004\014\uffbe\001\002\000\014\013\uffac\047\uffac\051\u0101" +
    "\052\u0104\056\u0103\001\002\000\006\013\uffb9\047\uffb9\001" +
    "\002\000\012\003\357\014\uffba\032\007\052\360\001\002" +
    "\000\004\014\uffbd\001\002\000\014\013\uffac\047\uffac\051" +
    "\u0101\052\u0104\056\u0103\001\002\000\006\013\uffb8\047\uffb8" +
    "\001\002\000\004\014\uffbb\001\002\000\010\015\154\022" +
    "\151\023\153\001\002\000\004\013\u0162\001\002\000\020" +
    "\003\140\014\uffe4\032\007\051\137\052\143\056\142\057" +
    "\141\001\002\000\004\014\uffef\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\012\002\003\004\012\025\004\026\015\001" +
    "\001\000\002\001\001\000\004\053\121\001\001\000\002" +
    "\001\001\000\010\004\063\016\061\017\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\012\026\034" +
    "\001\001\000\006\004\012\026\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\017" +
    "\013\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\012\026\026\001\001\000\002\001" +
    "\001\000\006\012\030\013\020\001\001\000\002\001\001" +
    "\000\006\004\012\026\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\037\011\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\012\026\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\047\013\020\001\001\000\002\001\001\000\006" +
    "\004\012\026\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\110\017\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\012\026\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\063" +
    "\016\124\017\076\031\123\001\001\000\004\054\125\001" +
    "\001\000\006\004\110\017\112\001\001\000\002\001\001" +
    "\000\006\004\135\032\130\001\001\000\002\001\001\000" +
    "\004\055\307\001\001\000\006\004\144\033\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\144\033\143\001\001\000\002\001\001\000\006" +
    "\004\144\033\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\144" +
    "\033\145\001\001\000\002\001\001\000\006\034\151\036" +
    "\147\001\001\000\010\034\202\036\147\037\254\001\001" +
    "\000\006\014\237\015\241\001\001\000\002\001\001\000" +
    "\006\034\176\036\147\001\001\000\006\040\163\041\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\172\001\001\000\004\040\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\202\036" +
    "\147\037\201\001\001\000\010\034\206\035\212\036\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\206\035\211\036\147\001\001\000\010\034\206\035\210" +
    "\036\147\001\001\000\010\034\206\035\207\036\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\144\033" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\256\036\147" +
    "\001\001\000\002\001\001\000\006\004\144\033\260\001" +
    "\001\000\002\001\001\000\006\034\262\036\147\001\001" +
    "\000\002\001\001\000\006\004\144\033\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\267\036\147" +
    "\001\001\000\002\001\001\000\006\004\144\033\271\001" +
    "\001\000\002\001\001\000\006\034\273\036\147\001\001" +
    "\000\002\001\001\000\006\004\144\033\275\001\001\000" +
    "\002\001\001\000\006\034\277\036\147\001\001\000\002" +
    "\001\001\000\006\004\144\033\301\001\001\000\002\001" +
    "\001\000\006\034\303\036\147\001\001\000\002\001\001" +
    "\000\006\004\144\033\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\313\043\311" +
    "\001\001\000\004\056\354\001\001\000\010\004\063\016" +
    "\352\017\076\001\001\000\004\044\314\001\001\000\002" +
    "\001\001\000\004\044\351\001\001\000\004\042\336\001" +
    "\001\000\004\042\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\324\001\001\000" +
    "\002\001\001\000\004\045\327\001\001\000\002\001\001" +
    "\000\004\060\330\001\001\000\002\001\001\000\004\005" +
    "\332\001\001\000\004\044\333\001\001\000\002\001\001" +
    "\000\004\045\335\001\001\000\002\001\001\000\004\061" +
    "\337\001\001\000\002\001\001\000\004\047\342\001\001" +
    "\000\002\001\001\000\004\062\343\001\001\000\002\001" +
    "\001\000\004\005\345\001\001\000\004\044\346\001\001" +
    "\000\002\001\001\000\004\047\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\110\017\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\360\050" +
    "\361\001\001\000\006\004\360\050\u015e\001\001\000\002" +
    "\001\001\000\006\004\360\050\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\367\051\371\001\001\000\004\022\u015c\001" +
    "\001\000\002\001\001\000\004\022\u0158\001\001\000\004" +
    "\030\u0155\001\001\000\010\004\u0111\023\u010d\027\u010c\001" +
    "\001\000\004\022\374\001\001\000\004\052\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0108\001\001\000\002\001\001\000\004\022\u0106" +
    "\001\001\000\004\022\u0104\001\001\000\004\052\u0105\001" +
    "\001\000\002\001\001\000\004\052\u0107\001\001\000\002" +
    "\001\001\000\004\052\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\u0140\024\u0137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\u011e\020\u012e\021\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\u0133\021\u012f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\u011e\020\u0152\021\u0115\001\001\000\006\004\u0133\021" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\360\050\u0157\001\001\000\002\001" +
    "\001\000\004\052\u0159\001\001\000\002\001\001\000\006" +
    "\004\360\050\u015b\001\001\000\002\001\001\000\004\052" +
    "\u015d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u0160\036\147\001\001\000\002\001\001\000\006\004" +
    "\144\033\u0162\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxLEN$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxLEN$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxLEN$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static String totalErrores = "";

    //Lo mas probable es que estos arraylist sean temporales
    public ArrayList<Estados> listEstados = new ArrayList<>();
    public ArrayList<MisExpresiones> listTemporal = new ArrayList<>();
    public ArrayList<Simbolos> listSimbolos = new ArrayList<>();
    public GeneracionArbol miArbol = new GeneracionArbol();
    public DatosLenguaje datos;
    public Lenguajes nuevo;
    public int cont1 = 1;
    public int precedencia = 1;
    public int precedencia2 = 1;
   
    public ArrayList<MisExpresiones> listExpresiones;
    public String tipoSimbolo = null;
    public Verificaciones verificador4 = new Verificaciones();
    public Verificaciones2 ver5 = new Verificaciones2();
    public CreacionClases clase = new CreacionClases();
    
    public SintaxLEN(AnalizadorLexico lex, ArrayList<Estados> listEstados, ArrayList<MisExpresiones> listTemporal, ArrayList<Simbolos> listSimbolos, Lenguajes nuevo){
        super(lex);
        this.listEstados = listEstados;
        this.listExpresiones = listExpresiones;
        this.listTemporal = listTemporal;
        this.listSimbolos = listSimbolos;
        this.nuevo = nuevo;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";

    }

    public void traspasarDatos(ArrayList<Simbolos> list1, ArrayList<Simbolos> listGeneral, Integer fila, Integer columna){
        for(int i = 0; i < list1.size(); i++){

            if(!verificador4.verificarIdentificador(listGeneral, list1.get(i).getIdentificador(), fila, columna)){
                listGeneral.add(list1.get(i));
            }            
        }
        list1.clear();
    }

    public void traspasarDatos2(ArrayList<Estados> list1, ArrayList<Estados> listGeneral){
        for(int i = 0; i < list1.size(); i++){
            listGeneral.add(list1.get(i));
        }
        list1.clear();
    }

    public void traspasarDatos3(ArrayList<MisExpresiones> list1, ArrayList<MisExpresiones> listGeneral){
        System.out.println(list1.size()+"       tamanno total del arreglo");
        for(int i = 0; i < list1.size(); i++){
            listGeneral.add(list1.get(i));
        }
        list1.clear();
    }
    

    public Integer verCodigo(char a){
        int codigo = (int) a;
        return codigo;
    }

   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxLEN$actions {
  private final SintaxLEN parser;

  /** Constructor */
  CUP$SintaxLEN$actions(SintaxLEN parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxLEN$do_action(
    int                        CUP$SintaxLEN$act_num,
    java_cup.runtime.lr_parser CUP$SintaxLEN$parser,
    java.util.Stack            CUP$SintaxLEN$stack,
    int                        CUP$SintaxLEN$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxLEN$result;

      /* select the action based on the action number */
      switch (CUP$SintaxLEN$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // COM2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("COM2",3, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // COM2 ::= comentario_a CODIGO comentario_b 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("COM2",3, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // COM ::= comentario_a CODIGO comentario_b 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("COM",2, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CADENA2 ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CADENA2 ::= CADENA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CADENA2 ::= CADENA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CADENA2 ::= CADENA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CADENA2 ::= CADENA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA2",7, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CADENA ::= CADENA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",6, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CADENA ::= CADENA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",6, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CADENA ::= CADENA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",6, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CADENA ::= CADENA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CADENA",6, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // PALABRA2 ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // PALABRA2 ::= PALABRA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PALABRA2 ::= PALABRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // PALABRA2 ::= PALABRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // PALABRA2 ::= PALABRA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA2",9, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // PALABRA ::= PALABRA2 numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // PALABRA ::= PALABRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // PALABRA ::= PALABRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // PALABRA ::= PALABRA2 soloLetra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PALABRA",8, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // PRODUCCION3 ::= COM 
            {
              String RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // PRODUCCION3 ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // PRODUCCION3 ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // PRODUCCION3 ::= soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // PRODUCCION3 ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // PRODUCCION3 ::= resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // PRODUCCION3 ::= PRODUCCION3 COM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // PRODUCCION3 ::= PRODUCCION3 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // PRODUCCION3 ::= PRODUCCION3 idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // PRODUCCION3 ::= PRODUCCION3 idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // PRODUCCION3 ::= PRODUCCION3 soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // PRODUCCION3 ::= PRODUCCION3 PRODUCCION4 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // PRODUCCION3 ::= PRODUCCION3 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION3",17, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // PRODUCCION4 ::= ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // PRODUCCION4 ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // PRODUCCION4 ::= comillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // PRODUCCION4 ::= diagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // PRODUCCION4 ::= guion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // PRODUCCION4 ::= llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // PRODUCCION4 ::= parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // PRODUCCION4 ::= parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PRODUCCION4 ::= igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // PRODUCCION4 ::= coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PRODUCCION4 ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // PRODUCCION4 ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // PRODUCCION4 ::= punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // PRODUCCION4 ::= interrogacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // PRODUCCION4 ::= agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // PRODUCCION4 ::= agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // PRODUCCION4 ::= punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // PRODUCCION4 ::= dos_puntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION4",18, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // PRODUCCION2 ::= ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // PRODUCCION2 ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // PRODUCCION2 ::= comillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // PRODUCCION2 ::= diagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // PRODUCCION2 ::= guion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // PRODUCCION2 ::= llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // PRODUCCION2 ::= llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // PRODUCCION2 ::= parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // PRODUCCION2 ::= parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // PRODUCCION2 ::= igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // PRODUCCION2 ::= coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // PRODUCCION2 ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // PRODUCCION2 ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // PRODUCCION2 ::= interrogacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // PRODUCCION2 ::= agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // PRODUCCION2 ::= agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // PRODUCCION2 ::= punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // PRODUCCION2 ::= dos_puntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION2",15, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PRODUCCION ::= COM 
            {
              String RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PRODUCCION ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PRODUCCION ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PRODUCCION ::= soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PRODUCCION ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PRODUCCION ::= PRODUCCION2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PRODUCCION ::= resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PRODUCCION ::= PRODUCCION COM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PRODUCCION ::= PRODUCCION numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PRODUCCION ::= PRODUCCION idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PRODUCCION ::= PRODUCCION idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PRODUCCION ::= PRODUCCION soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PRODUCCION ::= PRODUCCION PRODUCCION2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PRODUCCION ::= PRODUCCION resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("PRODUCCION",14, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SIMBOLOS2 ::= ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SIMBOLOS2 ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SIMBOLOS2 ::= diagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SIMBOLOS2 ::= igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SIMBOLOS2 ::= guion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SIMBOLOS2 ::= llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SIMBOLOS2 ::= llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SIMBOLOS2 ::= parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SIMBOLOS2 ::= parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SIMBOLOS2 ::= coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SIMBOLOS2 ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SIMBOLOS2 ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SIMBOLOS2 ::= interrogacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SIMBOLOS2 ::= agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SIMBOLOS2 ::= agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SIMBOLOS2 ::= punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SIMBOLOS2 ::= punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SIMBOLOS2 ::= dos_puntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS2",11, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SIMBOLOS ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SIMBOLOS ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SIMBOLOS ::= soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SIMBOLOS ::= SIMBOLOS2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SIMBOLOS ::= resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SIMBOLOS ::= SIMBOLOS numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SIMBOLOS ::= SIMBOLOS idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SIMBOLOS ::= SIMBOLOS idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SIMBOLOS ::= SIMBOLOS soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SIMBOLOS ::= SIMBOLOS SIMBOLOS2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SIMBOLOS ::= SIMBOLOS resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",10, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CODIGO2 ::= ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CODIGO2 ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CODIGO2 ::= comillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CODIGO2 ::= diagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CODIGO2 ::= igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CODIGO2 ::= guion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CODIGO2 ::= llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CODIGO2 ::= llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CODIGO2 ::= parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CODIGO2 ::= parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CODIGO2 ::= coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CODIGO2 ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CODIGO2 ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CODIGO2 ::= interrogacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CODIGO2 ::= agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CODIGO2 ::= agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CODIGO2 ::= punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CODIGO2 ::= punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CODIGO2 ::= dos_puntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO2",13, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CODIGO ::= COM 
            {
              String RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CODIGO ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CODIGO ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CODIGO ::= soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CODIGO ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CODIGO ::= CODIGO2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CODIGO ::= resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CODIGO ::= CODIGO COM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CODIGO ::= CODIGO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CODIGO ::= CODIGO idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CODIGO ::= CODIGO idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CODIGO ::= CODIGO soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CODIGO ::= CODIGO CODIGO2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CODIGO ::= CODIGO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String devuelto = a+" "+b; RESULT=devuelto; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("CODIGO",12, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LETRA2 ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA2",5, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LETRA2 ::= LETRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA2",5, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LETRA2 ::= LETRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA2",5, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LETRA ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA",4, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LETRA ::= LETRA2 idMay 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA",4, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LETRA ::= LETRA2 idMin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("LETRA",4, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RESULTADOS ::= PRODUCCION3 
            {
              ArrayList<Codigo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 ArrayList<Codigo> miCodigo = new ArrayList<>(); miCodigo.add(new Codigo("codigo", a.toString())); RESULT=miCodigo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("RESULTADOS",21, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RESULTADOS ::= PRODUCCION3 result igual PRODUCCION punto_coma 
            {
              ArrayList<Codigo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		 ArrayList<Codigo> miCodigo = new ArrayList<>(); miCodigo.add(new Codigo("codigo", b.toString())); miCodigo.add(new Codigo("result", a.toString())); RESULT=miCodigo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("RESULTADOS",21, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RESULTADOS ::= result igual PRODUCCION punto_coma 
            {
              ArrayList<Codigo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		 ArrayList<Codigo> miCodigo = new ArrayList<>(); miCodigo.add(new Codigo("result", a.toString())); RESULT=miCodigo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("RESULTADOS",21, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // A53 ::= 
            {
              ArrayList<Codigo> RESULT =null;
		 RESULT=null; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A53",22, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // A53 ::= llave_a llave_b 
            {
              ArrayList<Codigo> RESULT =null;
		  RESULT = null; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A53",22, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // A53 ::= llave_a RESULTADOS llave_b 
            {
              ArrayList<Codigo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		ArrayList<Codigo> a = (ArrayList<Codigo>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		 RESULT=a;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A53",22, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // A52 ::= 
            {
              ArrayList<Expresiones> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",40, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // A52 ::= idMay VAR A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  if(parser.ver5.verificarId(parser.listSimbolos, a.toString(), aleft, aright)){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null,"*", c)); } else { b.add(new Expresiones(a.toString(), false, null, null, c)); } } RESULT=b;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",40, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // A52 ::= idMin VAR A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString(), aleft, aright)){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, ")", c)); } else { b.add(new Expresiones(a.toString(), false, null, null, c)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",40, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // A52 ::= soloLetra VAR A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString(), aleft, aright)){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&", c)); } else { b.add(new Expresiones(a.toString(), false, null, null, c)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A52",40, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SIMBOLO ::= 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SIMBOLO ::= dos_puntos idMay 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SIMBOLO ::= dos_puntos idMin 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIMBOLO ::= dos_puntos soloLetra 
            {
              Object RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("SIMBOLO",1, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VAR ::= 
            {
              String RESULT =null;
		 RESULT=null; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("VAR",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VAR ::= dos_puntos soloLetra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("VAR",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAR ::= dos_puntos idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("VAR",16, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // A51 ::= idMay VAR A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString(), aleft, aright)){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&", c)); } else { b.add(new Expresiones(a.toString(), false, null, null, c)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A51",39, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // A51 ::= idMin VAR A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString(), aleft, aright)){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&", c)); } else { b.add(new Expresiones(a.toString(), false, null, null, c)); } }  RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A51",39, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // A51 ::= soloLetra VAR A52 
            {
              ArrayList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(parser.ver5.verificarId(parser.listSimbolos, a.toString(), aleft, aright)){ if(parser.ver5.verificarTerminal(parser.listSimbolos, a.toString())){ b.add(new Expresiones(a.toString(), true, null, "&", c)); } else { b.add(new Expresiones(a.toString(), false, null, null, c)); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A51",39, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // A5 ::= 
            {
              ArrayList<Estados> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",38, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // A5 ::= error A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> b = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.totalErrores += "(ERROR SINTACTICO) Produccion sentenciada de forma incorrecta.\n"; RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",38, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // A5 ::= COM A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> a = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",38, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // A5 ::= idMay dos_puntos dos_puntos A53 punto_coma A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		ArrayList<Codigo> c = (ArrayList<Codigo>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> b = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 String codigo = null; String results = null; if(c!=null){ for(int i = 0; i < c.size(); i++){  if(c.get(i).getTipo().equals("codigo")){ codigo = c.get(i).getTexto(); } else if(c.get(i).getTipo().equals("result")){ results=c.get(i).getTexto(); } }  } if(parser.ver5.verificarEstado(parser.listSimbolos, a.toString(), aleft, aright)){ b.add(new Estados(parser.cont1, a.toString(), new ArrayList<>(), results, codigo)); parser.cont1++; } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",38, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // A5 ::= idMay dos_puntos dos_puntos A51 A53 punto_coma A5 
            {
              ArrayList<Estados> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		ArrayList<Expresiones> b = (ArrayList<Expresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		ArrayList<Codigo> c = (ArrayList<Codigo>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Estados> d = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		String codigo = null; String results = null; if(c!=null){ for(int i = 0; i < c.size(); i++){  if(c.get(i).getTipo().equals("codigo")){ codigo = c.get(i).getTexto(); } else if(c.get(i).getTipo().equals("result")){ results=c.get(i).getTexto(); } }  } if(parser.ver5.verificarEstado(parser.listSimbolos, a.toString(), aleft, aright)){ d.add(new Estados(parser.cont1,a.toString(), b, results, codigo)); parser.cont1++; } RESULT=d; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A5",38, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // A421 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A421",37, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // A421 ::= coma idMay A421 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> b = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdentificador(b, a.toString(), aleft, aright)){ b.add(new Simbolos("NoTerminal", a.toString(), parser.tipoSimbolo, parser.precedencia2)); parser.precedencia2++; } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A421",37, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A411 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A411",35, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // A411 ::= coma idMin A411 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> b = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdentificador(b, a.toString(), aleft, aright)){  b.add(new Simbolos("Terminal", a.toString(), parser.tipoSimbolo, parser.precedencia)); parser.precedencia++; } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A411",35, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= tipoCadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= tipoReal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= tipoEntero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // A41 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A41",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // A41 ::= error A41 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> a = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.totalErrores += "(ERROR SINTACTICO) Declaracion de variable terminal/noTerminal sentenciada de forma incorrecta.\n"; RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A41",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // A41 ::= noTerminal TIPO NT$6 idMay A421 NT$7 punto_coma COM2 A41 
            {
              ArrayList<Simbolos> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (ArrayList<Simbolos>) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		ArrayList<Simbolos> c = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.traspasarDatos(c,d, bleft, bright); RESULT=d; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A41",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              ArrayList<Simbolos> RESULT =(ArrayList<Simbolos>) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> c = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 if(!parser.verificador4.verificarIdentificador(c, b.toString(), bleft, bright)){ c.add(new Simbolos("NoTerminal", b.toString(), parser.tipoSimbolo, parser.precedencia2)); parser.precedencia2++; } 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$6 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.tipoSimbolo=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // A41 ::= terminal1 TIPO NT$4 idMin A411 NT$5 punto_coma COM2 A41 
            {
              ArrayList<Simbolos> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<Simbolos>) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		ArrayList<Simbolos> c = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  parser.traspasarDatos(c,d, bleft, bright); RESULT=d; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A41",34, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              ArrayList<Simbolos> RESULT =(ArrayList<Simbolos>) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> c = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
  if(!parser.verificador4.verificarIdentificador(c, a.toString(), bleft, bright)){ c.add(new Simbolos("Terminal", b.toString(), parser.tipoSimbolo, parser.precedencia)); parser.precedencia++; }  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.tipoSimbolo=a;
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // A4 ::= COM2 A41 
            {
              ArrayList<Simbolos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> a = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A4",33, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // A34 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",30, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // A34 ::= espacio A34 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",30, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // A34 ::= tab A34 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",30, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // A34 ::= enter A34 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A34",30, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // A311 ::= 
            {
              NodoArbol RESULT =null;
		 RESULT=null; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A311",27, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // A311 ::= A31 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A311",27, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // A33 ::= 
            {
              NodoArbol RESULT =null;
		 RESULT=null; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // A33 ::= A31 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 NodoArbol nuevo = new NodoArbol("simbolo", null, null, "."); if(a!=null){ nuevo.setNodo2(a);  }  RESULT=nuevo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // A33 ::= mas A311 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol b = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  NodoArbol nuevo = new NodoArbol("simbolo", null, null, a.toString()); if(b!=null){ NodoArbol union = new NodoArbol("simbolo", null, null, ".");  union.setNodo1(nuevo); union.setNodo2(b);  RESULT=union; } else { RESULT=nuevo; }   
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // A33 ::= por A311 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol b = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 NodoArbol nuevo = new NodoArbol("simbolo", null, null, a.toString()); if(b!=null){ NodoArbol union = new NodoArbol("simbolo", null, null, "."); union.setNodo1(nuevo); union.setNodo2(b); RESULT=union; } else { RESULT=nuevo; }  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // A33 ::= interrogacion A311 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol b = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  NodoArbol nuevo = new NodoArbol("simbolo", null, null, a.toString()); if(b!=null){  NodoArbol union = new NodoArbol("simbolo", null, null, "."); union.setNodo1(nuevo); union.setNodo2(b); RESULT=union;  } else { RESULT=nuevo; }   
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // A33 ::= o A311 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol b = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		  NodoArbol nuevo = new NodoArbol("simbolo", null, null, a.toString());  if(b!=null){    nuevo.setNodo2(b); } RESULT=nuevo;   
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A33",29, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_LETRA ::= idMay 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO_LETRA",31, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_LETRA ::= idMin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("TIPO_LETRA",31, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // A32 ::= comillas SIMBOLOS comillas 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		 /*NodoArbol nuevo = new NodoArbol("caracteres", null, null, a.toString());*/ NodoArbol nuevo = parser.miArbol.creacionNodoPalabras(a.toString());  RESULT=nuevo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",28, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // A32 ::= agrupacion_a A34 agrupacion_b 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 NodoArbol nuevo = new NodoArbol("espacios", null, null, b.toString()); RESULT=nuevo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",28, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // A32 ::= agrupacion_a TIPO_LETRA guion TIPO_LETRA agrupacion_b 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 NodoArbol nuevo = new NodoArbol("rango", parser.verCodigo(b.toString().charAt(0)), parser.verCodigo(d.toString().charAt(0)), null); RESULT=nuevo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",28, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // A32 ::= agrupacion_a numero guion numero agrupacion_b 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 NodoArbol nuevo = new NodoArbol("rango", parser.verCodigo(b.toString().charAt(0) ), parser.verCodigo(d.toString().charAt(0)), null); RESULT=nuevo; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A32",28, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // A31 ::= A32 A33 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol b = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b!=null){  if(!b.getCaracteres().equals("|")) {  if(b.getNodo2()!= null){ b.getNodo1().setNodo1(a); } else { b.setNodo1(a); } } else { b.setNodo1(a); } RESULT=b;  } else { RESULT=a; } 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A31",26, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // A31 ::= parentesis_a A31 parentesis_b A33 
            {
              NodoArbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol b = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		NodoArbol d = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(d.getNodo1()!=null){ d.getNodo1().setNodo1(b); }  else {   d.setNodo1(b); } RESULT=d;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A31",26, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // A35 ::= 
            {
              ArrayList<MisExpresiones> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // A35 ::= error A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.totalErrores += "(ERROR SINTACTICO) Expresion regular sentenciada de forma incorrecta.\n";  RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // A35 ::= COM A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // A35 ::= ampersand igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)){ MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size());  c.add(nuevo); }     RESULT=c; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // A35 ::= idMay igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)){ MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size()); c.add(nuevo); }  RESULT=c; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // A35 ::= idMin igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)){ MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size()); c.add(nuevo);   } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // A35 ::= soloLetra igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)) { MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size()); c.add(nuevo); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A35",25, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // A3 ::= error A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.totalErrores += "(ERROR SINTACTICO) Expresion regular sentenciada de forma incorrecta.\n"; RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // A3 ::= COM A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> a = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // A3 ::= ampersand igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)){ MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size());  c.add(nuevo); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // A3 ::= idMay igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)){ MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size());  c.add(nuevo); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // A3 ::= idMin igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)){ MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size()); c.add(nuevo); }  RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // A3 ::= soloLetra igual A31 punto_coma A35 
            {
              ArrayList<MisExpresiones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		NodoArbol a = (NodoArbol)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(!parser.verificador4.verificarIdExpresion(c, b.toString(), bleft, bright)) { MisExpresiones nuevo = new MisExpresiones(b.toString(), a, ""); nuevo.setPrioridad(c.size());  c.add(nuevo); } RESULT=c;  
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A3",24, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // A2 ::= 
            {
              String RESULT =null;

              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A2",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // A2 ::= CODIGO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A2",23, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // A11 ::= 
            {
              DatosLenguaje RESULT =null;
		 RESULT=new DatosLenguaje(); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // A11 ::= error A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 parser.totalErrores += "(ERROR SINTACTICO) Atributo sentenciado de forma incorrecta en SECCION 1.\n";  RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // A11 ::= COM A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // A11 ::= extension dos_puntos PALABRA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getExtension()==null){ b.setExtension(a.toString()); } else { parser.totalErrores += "(ERROR SEMANTICO) Atributo EXTENSION sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; System.out.println("extension ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // A11 ::= lanzamiento dos_puntos numero punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getLanzamiento()==null){ b.setLanzamiento(Integer.parseInt(a.toString())); } else { parser.totalErrores += "(ERROR SEMANTICO) Atributo LANZAMIENTO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; System.out.println("lanzamiento ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // A11 ::= autor dos_puntos CADENA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getAutor()==null){ b.setAutor(a.toString()); } else { parser.totalErrores += "(ERROR SEMANTICO) Atributo AUTOR sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; System.out.println("autor ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A11 ::= version dos_puntos PALABRA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){ if(b.getVersion()==null){ b.setVersion(a.toString()); } else { parser.totalErrores += "(ERROR SEMANTICO) Atributo VERSION sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n";  System.out.println("version ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A11 ::= nombre dos_puntos PALABRA punto_coma A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje b = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 if(b.getTodoCorrecto()){if(b.getNombre()==null){ b.setNombre(a.toString()); } else {   parser.totalErrores += "(ERROR SEMANTICO) Atributo NOMBRE sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; System.out.println("nombre ya esta"); b.setTodoCorrecto(false); } } RESULT=b; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A11",20, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A1 ::= A11 
            {
              DatosLenguaje RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A1",19, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= A1 NT$0 separador A2 NT$1 separador A3 NT$2 separador A4 NT$3 separador A5 separador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-13)).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		ArrayList<Estados> e = (ArrayList<Estados>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		 parser.cont1=1; parser.traspasarDatos2(e, parser.listEstados); System.out.println("LLEGO AQUI PERRAS"); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-9)).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<Simbolos> d = (ArrayList<Simbolos>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.traspasarDatos(d, parser.listSimbolos, null, null);     parser.listSimbolos.add(new Simbolos("Terminal", "$", "", parser.precedencia)); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		ArrayList<MisExpresiones> c = (ArrayList<MisExpresiones>)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.traspasarDatos3(c, parser.listTemporal); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 parser.nuevo.setMiCodigo(b); 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()).right;
		DatosLenguaje a = (DatosLenguaje)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.peek()).value;
 System.out.println("AQUI TAMBIEN JAJAJA"); if(a.getNombre()==null){  parser.totalErrores += "(ERROR SEMANTICO) Falta atributo nombre. Linea: "+aleft+" Columna: "+aright+".\n";  System.out.println("Falta atributo nombre"); } else { parser.nuevo.setDatos(a);  } 
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          return CUP$SintaxLEN$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)).value;
		RESULT = start_val;
              CUP$SintaxLEN$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.elementAt(CUP$SintaxLEN$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLEN$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxLEN$parser.done_parsing();
          return CUP$SintaxLEN$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

